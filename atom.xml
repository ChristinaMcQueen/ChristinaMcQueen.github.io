<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of 铭铭GE&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://christinamcqueen.github.io/"/>
  <updated>2018-05-11T02:50:10.408Z</updated>
  <id>https://christinamcqueen.github.io/</id>
  
  <author>
    <name>铭铭GE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 Flexbox 的若干问题</title>
    <link href="https://christinamcqueen.github.io/2018/04/29/CSS%E7%9B%B8%E5%85%B3/%E5%85%B3%E4%BA%8E-Flexbox-%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://christinamcqueen.github.io/2018/04/29/CSS相关/关于-Flexbox-的若干问题/</id>
    <published>2018-04-29T03:59:34.000Z</published>
    <updated>2018-05-11T02:50:10.408Z</updated>
    
    <content type="html"><![CDATA[<p>当初开始学习使用 Flexbox 就是从🍭<a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">FLEXBOX FROGGY</a>这个小游戏开始的<br>另外，还有关于 Grid 布局的孪生兄弟游戏：🍭<a href="http://cssgridgarden.com/" target="_blank" rel="noopener">GRID GARDEN</a></p><h1 id="CSS-中的布局模式"><a href="#CSS-中的布局模式" class="headerlink" title="CSS 中的布局模式"></a>CSS 中的布局模式</h1><p>CSS 布局可以由 <code>table</code>、<code>float</code>、<code>position</code>、<code>display</code> 等方式实现，但是这些布局在使用中往往也会伴随一些副作用，想要实现一个比较「复杂」的布局也往往要花费比较大的精力</p><blockquote><p>CSS2.1 中定义了四种布局模式，由一个盒与其兄弟、祖先盒的关系决定其尺寸与位置的算法</p></blockquote><ul><li>块布局： 呈现文档的布局模式</li><li>行内布局： 呈现文本的布局模式</li><li>表格布局： 用表格呈现 2D 数据的布局模式</li><li>定位布局： 能够直接地定位元素的布局模式，定位元素基本与其他元素没有任何关系</li></ul><p>CSS3 引入的 Flexbox （伸缩）布局模式，主要思想是让容器由有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳方式填充可用空间</p><a id="more"></a><p>Flexbox 布局方向不可预知，不像常规的布局（块：从上到下，内联：从左到右），常规布局更适合页面布局，而对于大型或复杂的布局就缺乏灵活性</p><h1 id="新版本-Flexbox-的基本使用"><a href="#新版本-Flexbox-的基本使用" class="headerlink" title="新版本 Flexbox 的基本使用"></a>新版本 Flexbox 的基本使用</h1><p>Flexbox 具有多个版本，这里的新版本指的是 W3C 在 2014 年 9 月为 Flexbox 推出的最新版本语法<br>Flexbox 相关术语可以参考 W3C 的🍭<a href="https://www.w3.org/TR/css-flexbox/#box-model" target="_blank" rel="noopener">Flexbox 模型</a></p><p>浏览器支持度：</p><p>Browser|Version|Addition</p><table><thead><tr><th style="text-align:center"><strong>Browser</strong></th><th style="text-align:center"><strong>Version</strong></th><th style="text-align:center"><strong>Addition</strong></th></tr></thead><tbody><tr><td style="text-align:center">Chrome</td><td style="text-align:center">29+</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Firefox</td><td style="text-align:center">28+</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Internet Explorer</td><td style="text-align:center">11+</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:center">17+</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Safari</td><td style="text-align:center">6.1+</td><td style="text-align:center">(prefixed with <code>-webkit-</code>)</td></tr><tr><td style="text-align:center">Android</td><td style="text-align:center">4.4+</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">iOS</td><td style="text-align:center">7.1+</td><td style="text-align:center">(prefixed with <code>-webkit-</code>)</td></tr></tbody></table><p>兼容旧版本 Flexbox 可以参考🍭<a href="https://css-tricks.com/using-flexbox/" target="_blank" rel="noopener">Using Flexbox</a></p><h2 id="Flexbox-容器"><a href="#Flexbox-容器" class="headerlink" title="Flexbox 容器"></a>Flexbox 容器</h2><p><img src="/img/flexbox-model.webp" alt="flex container"></p><p><strong>设置 Flexbox dispaly 属性</strong>：<code>display: flex | inline-flex</code><br>⚠️<strong>注意：</strong>设置 Flexbox 布局后，<code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 在伸缩项目上失效</p><h1 id="Flexbox-相关属性"><a href="#Flexbox-相关属性" class="headerlink" title="Flexbox 相关属性"></a>Flexbox 相关属性</h1><h2 id="父元素上的属性"><a href="#父元素上的属性" class="headerlink" title="父元素上的属性"></a>父元素上的属性</h2><p><strong>方向：</strong><code>flex-direction: row | row-reverse | column | column-reverse</code></p><div class="flexbox row"><div class="flexbox-item">row</div><div class="flexbox-item">row</div><div class="flexbox-item">row</div></div><br><div class="flexbox row-reverse"><div class="flexbox-item">row</div><div class="flexbox-item">-</div><div class="flexbox-item">reverse</div></div><br><div class="flexbox column"><div class="flexbox-item">c</div><div class="flexbox-item">o</div><div class="flexbox-item">l</div><div class="flexbox-item">u</div><div class="flexbox-item">m</div><div class="flexbox-item">n</div></div><br><div class="flexbox column-reverse"><div class="flexbox-item">c</div><div class="flexbox-item">o</div><div class="flexbox-item">l</div><div class="flexbox-item">u</div><div class="flexbox-item">m</div><div class="flexbox-item">n</div><div class="flexbox-item">-</div><div class="flexbox-item">reverse</div></div><p><strong>换行：</strong><code>flex-wrap: nowrap | wrap | wrap-reverse</code></p><div class="flexbox nowrap"><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div><div class="flexbox-item">nowrap</div></div><br><div class="flexbox wrap"><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div><div class="flexbox-item">wrap</div></div><br><div class="flexbox wrap-reverse"><div class="flexbox-item">1</div><div class="flexbox-item">wrapr-reverse</div><div class="flexbox-item">2</div><div class="flexbox-item">wrapr-reverse</div><div class="flexbox-item">3</div><div class="flexbox-item">wrapr-reverse</div><div class="flexbox-item">4</div><div class="flexbox-item">wrapr-reverse</div><div class="flexbox-item">5</div><div class="flexbox-item">wrapr-reverse</div><div class="flexbox-item">6</div><div class="flexbox-item">wrapr-reverse</div></div><p><strong>方向 &amp; 换行：</strong><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code></p><p><strong>主轴对齐：</strong><code>justify-content: flex-start | flex-end | center | space-between | space-around</code></p><div class="flexbox flex-start"><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div></div><br><div class="flexbox flex-end"><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><iv class="flexbox-item">flex-end</iv></div><br><div class="flexbox flex-center"><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div></div><br><div class="flexbox space-between"><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div></div><br><div class="flexbox space-around"><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div></div><p><strong>侧轴对齐：</strong><code>align-items: stretch | flex-start | flex-end | center | baseline</code></p><div class="flexbox align align-items-stretch"><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div></div><br><div class="flexbox align align-items-start"><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div></div><br><div class="flexbox align align-items-end"><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div></div><br><div class="flexbox align align-items-center"><div class="flexbox-item">center</div><div class="flexbox-item">center</div></div><br><div class="flexbox align align-items-baseline"><div class="flexbox-item" style="line-height: 60px;">line-heigth: 60px;</div><div class="flexbox-item">baseline</div></div><p><strong>堆栈伸缩行：</strong><code>align-content: stretch | flex-start | flex-end | center | space-between | space-around</code></p><div class="flexbox wrap align-content align-content-stretch"><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div><div class="flexbox-item">stretch</div></div><br><div class="flexbox wrap align-content align-content-start"><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div><div class="flexbox-item">flex-start</div></div><br><div class="flexbox wrap align-content align align-content-end"><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div><div class="flexbox-item">flex-end</div></div><br><div class="flexbox wrap align-content align-content-center"><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div><div class="flexbox-item">center</div></div><br><div class="flexbox wrap align-content align-content-between"><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div><div class="flexbox-item">space-between</div></div><br><div class="flexbox wrap align-content align-content-around"><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div><div class="flexbox-item">space-around</div></div><h2 id="子元素上的属性"><a href="#子元素上的属性" class="headerlink" title="子元素上的属性"></a>子元素上的属性</h2><p><strong>显示顺序：</strong><code>order: &lt;Integer&gt;</code></p><div class="flexbox wrap"><div class="flexbox-item" style="order: 0;">A -&gt; order: 0</div><div class="flexbox-item" style="order: 2;">B -&gt; order: 2</div><div class="flexbox-item" style="order: -1;">C -&gt; order: -1</div><div class="flexbox-item" style="order: 4;">D -&gt; order: 4</div></div><p><code>flex-basis: &lt;Length&gt; | auto</code><br>定义了在分配多余空间之前，伸缩元素占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间<br>需要配合 <code>flex-grow</code> <code>flex-shrink</code> 使用，设置 <code>flex-basis</code> 后，伸缩元素的 <code>width</code> 和 <code>height</code> 属性将会失效</p><p><strong>放大比例：</strong><code>flex-grow: &lt;Number&gt;</code></p><div class="flexbox grow"><div class="flexbox-item" style="flex-grow: 0;">flex-grow: 0;</div><div class="flexbox-item" style="flex-grow: 1;">flex-grow: 1;</div><div class="flexbox-item" style="flex-grow: 2;">flex-grow: 2;</div></div><p><strong>收缩比例：</strong><code>flex-shrink: &lt;Number&gt;</code></p><div class="flexbox align"><div class="flexbox-item" style="flex-basis: 60%; flex-shrink: 0;">flex-basis: 60%; flex-shrink: 0;</div><div class="flexbox-item" style="flex-shrink: 1;">flex-shrink: 1;</div><div class="flexbox-item" style="flex-shrink: 0;">flex-shrink: 0;</div></div><p><strong>收放比例：</strong><code>flex: &lt;flex-grow&gt; || &lt;flex-shrink&gt; || &lt;flex-basis&gt;</code></p><p>默认值为：<code>flex: 0 1 auto</code></p><p><strong>子元素对齐：</strong><code>align-self: auto | stretch | flex-start | flex-end | center | baseline</code></p><div class="flexbox align align-content"><div class="flexbox-item" style="align-self: auto;">auto</div><div class="flexbox-item" style="align-self: stretch;">stretch</div><div class="flexbox-item" style="align-self: flex-start;">flex-start</div><div class="flexbox-item" style="align-self: flex-end;">flex-end</div><div class="flexbox-item" style="align-self: center;">center</div><div class="flexbox-item" style="align-self: baseline;">baseline</div></div><p>参考连接：<br><a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="noopener">A Visual Guide to CSS3 Flexbox Properties</a></p><style type="text/css">.flexbox {    display: flex;    background: #ffd550;    padding: 10px;}.flexbox.align {    height: 96px;}.row-reverse {    flex-direction: row-reverse;}.column {    flex-direction: column;}.column-reverse {    flex-direction: column-reverse;}.nowrap {    flex-wrap: nowrap;}.wrap {    flex-wrap: wrap;}.wrap-reverse {    flex-wrap: wrap-reverse;}.flex-start {    justify-content: flex-start;}.flex-end {    justify-content: flex-end;}.flex-center {    justify-content: center;}.space-between {    justify-content: space-between;}.space-around {    justify-content: space-around;}.align-items-stretch {    align-items: stretch;}.align-items-start {    align-items: flex-start;}.align-items-end {    align-items: flex-end;}.align-items-center {    align-items: center;}.align-items-baseline {    align-items: baseline;    line-height: 48px;}.align-content-stretch {    align-content: stretch;}.align-content-start {    align-content: flex-start;}.align-content-end {    align-content: flex-end;}.align-content-center {    align-content: center;}.align-content-between {    align-content: space-between;}.align-content-around {    align-content: space-around;}.flexbox-item {    width: auto;    height: 30px;    margin: 5px;    padding: 0 10px;    color: #595d93;    background: #fff;    border-radius: 4px;    border: 2px solid #595d93;    font-size: 16px;    line-height: 26px;    text-align: center;}.flexbox.align .flexbox-item {    height: auto;}.flexbox.align-content {    height: 160px;    line-height: 50px;}</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当初开始学习使用 Flexbox 就是从🍭&lt;a href=&quot;http://flexboxfroggy.com/#zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FLEXBOX FROGGY&lt;/a&gt;这个小游戏开始的&lt;br&gt;另外，还有关于 Grid 布局的孪生兄弟游戏：🍭&lt;a href=&quot;http://cssgridgarden.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GRID GARDEN&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;CSS-中的布局模式&quot;&gt;&lt;a href=&quot;#CSS-中的布局模式&quot; class=&quot;headerlink&quot; title=&quot;CSS 中的布局模式&quot;&gt;&lt;/a&gt;CSS 中的布局模式&lt;/h1&gt;&lt;p&gt;CSS 布局可以由 &lt;code&gt;table&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt;、&lt;code&gt;display&lt;/code&gt; 等方式实现，但是这些布局在使用中往往也会伴随一些副作用，想要实现一个比较「复杂」的布局也往往要花费比较大的精力&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS2.1 中定义了四种布局模式，由一个盒与其兄弟、祖先盒的关系决定其尺寸与位置的算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;块布局： 呈现文档的布局模式&lt;/li&gt;
&lt;li&gt;行内布局： 呈现文本的布局模式&lt;/li&gt;
&lt;li&gt;表格布局： 用表格呈现 2D 数据的布局模式&lt;/li&gt;
&lt;li&gt;定位布局： 能够直接地定位元素的布局模式，定位元素基本与其他元素没有任何关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS3 引入的 Flexbox （伸缩）布局模式，主要思想是让容器由有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳方式填充可用空间&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="https://christinamcqueen.github.io/tags/CSS3/"/>
    
      <category term="flex" scheme="https://christinamcqueen.github.io/tags/flex/"/>
    
      <category term="布局" scheme="https://christinamcqueen.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Next.js 集成 Style-Loader</title>
    <link href="https://christinamcqueen.github.io/2018/04/18/Tool/Next-js-%E9%9B%86%E6%88%90-Style-loader/"/>
    <id>https://christinamcqueen.github.io/2018/04/18/Tool/Next-js-集成-Style-loader/</id>
    <published>2018-04-18T03:39:32.000Z</published>
    <updated>2018-05-11T02:04:12.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js-教程"><a href="#Next-js-教程" class="headerlink" title="Next.js 教程"></a>Next.js 教程</h1><p>🍭<a href="https://github.com/zeit/next.js" target="_blank" rel="noopener">zeit/next.js</a> || 🍭<a href="https://learnnextjs.com/basics/getting-started" target="_blank" rel="noopener">learnnextjs.com</a> 给出了相对比较完整的 Next.js 使用教程。</p><h1 id="引入样式文件"><a href="#引入样式文件" class="headerlink" title="引入样式文件"></a>引入样式文件</h1><p>刚刚接触 Next.js，还不是十分了解，第一个遇到的就是样式文件引入的问题，Next.js 支持样式文件引入，包括 <code>.css</code>、<code>.less</code>、<code>.styl</code>、<code>.scss</code>，如果仅需引入一种文件，可以 🍭<a href="https://github.com/zeit/next.js#importing-css--sass--less--stylus-files" target="_blank" rel="noopener">戳这里</a>或者下面列出的模块，亲测可以解决样式引入的问题</p><ul><li>🍭<a href="https://github.com/zeit/next-plugins/tree/master/packages/next-css" target="_blank" rel="noopener">@zeit/next-css</a></li><li>🍭<a href="https://github.com/zeit/next-plugins/tree/master/packages/next-sass" target="_blank" rel="noopener">@zeit/next-sass</a></li><li>🍭<a href="https://github.com/zeit/next-plugins/tree/master/packages/next-less" target="_blank" rel="noopener">@zeit/next-less</a></li><li>🍭<a href="https://github.com/zeit/next-plugins/tree/master/packages/next-stylus" target="_blank" rel="noopener">@zeit/next-stylus</a></li></ul><h1 id="多种样式文件引入"><a href="#多种样式文件引入" class="headerlink" title="多种样式文件引入"></a>多种样式文件引入</h1><p>由于项目是团队开发，每个人的代码习惯会有所不同，那么，如果想引入多种文件就比较麻烦<br>我将以上模块进行了合并：</p><a id="more"></a><p><strong>🍭<a href="https://github.com/ChristinaMcQueen/next.js-style-loaders" target="_blank" rel="noopener">项目地址</a></strong></p><p><code>commons-chunk-config.js</code> 文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">config, test = <span class="regexp">/\.css$/</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Extend the default CommonsChunkPlugin config</span></span><br><span class="line">    config.plugins = config.plugins.map(<span class="function">(<span class="params">plugin</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            plugin.constructor.name === <span class="string">'CommonsChunkPlugin'</span> &amp;&amp;</span><br><span class="line">            (plugin.filenameTemplate === <span class="string">'commons.js'</span> || plugin.filenameTemplate === <span class="string">'main.js'</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">const</span> defaultMinChunks = plugin.minChunks;</span><br><span class="line">            plugin.minChunks = <span class="function">(<span class="params"><span class="built_in">module</span>, count</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// Move all styles to commons chunk so they can be extracted to a single file</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="built_in">module</span>.resource.match(test)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Use default minChunks function for non-style modules</span></span><br><span class="line">                <span class="keyword">return</span> defaultMinChunks(<span class="built_in">module</span>, count);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> plugin;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>css-loader-config.js</code> 文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findUp = <span class="built_in">require</span>(<span class="string">'find-up'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = (</span><br><span class="line">    config,</span><br><span class="line">    extractPlugin,</span><br><span class="line">    &#123;</span><br><span class="line">        cssModules = <span class="literal">false</span>, cssLoaderOptions = &#123;&#125;, dev, isServer, loaders = []</span><br><span class="line">    &#125;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> postcssConfig = findUp.sync(<span class="string">'postcss.config.js'</span>, &#123;</span><br><span class="line">        cwd: config.context</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> postcssLoader;</span><br><span class="line">    <span class="keyword">if</span> (postcssConfig) &#123;</span><br><span class="line">        postcssLoader = &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                config: &#123;</span><br><span class="line">                    path: postcssConfig</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> cssLoader = &#123;</span><br><span class="line">        loader: isServer ? <span class="string">'css-loader/locals'</span> : <span class="string">'css-loader'</span>,</span><br><span class="line">        options: <span class="built_in">Object</span>.assign(</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                modules: cssModules,</span><br><span class="line">                minimize: !dev,</span><br><span class="line">                sourceMap: dev,</span><br><span class="line">                importLoaders: loaders.length + (postcssLoader ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            cssLoaderOptions</span><br><span class="line">        )</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// When not using css modules we don't transpile on the server</span></span><br><span class="line">    <span class="keyword">if</span> (isServer &amp;&amp; !cssLoader.options.modules) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'ignore-loader'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// When on the server and using css modules we transpile the css</span></span><br><span class="line">    <span class="keyword">if</span> (isServer &amp;&amp; cssLoader.options.modules) &#123;</span><br><span class="line">        <span class="keyword">return</span> [cssLoader, postcssLoader, ...loaders].filter(<span class="built_in">Boolean</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        dev &amp;&amp; <span class="string">'extracted-loader'</span>,</span><br><span class="line">        ...extractPlugin.extract(&#123;</span><br><span class="line">            use: [cssLoader, postcssLoader, ...loaders].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>next.config.js</code> 文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> cssLoaderConfig = <span class="built_in">require</span>(<span class="string">'./css-loader-config'</span>);</span><br><span class="line"><span class="keyword">const</span> commonsChunkConfig = <span class="built_in">require</span>(<span class="string">'./commons-chunk-config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    webpack: <span class="function">(<span class="params">config, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            dev, isServer, defaultLoaders</span><br><span class="line">        &#125; = options;</span><br><span class="line">        <span class="keyword">let</span> &#123; extractCSSPlugin &#125; = options;</span><br><span class="line">        <span class="keyword">if</span> (!extractCSSPlugin) &#123;</span><br><span class="line">            extractCSSPlugin = <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">                filename: <span class="string">'static/style.css'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            config.plugins.push(extractCSSPlugin);</span><br><span class="line">            options.extractCSSPlugin = extractCSSPlugin;</span><br><span class="line">            <span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">                config = commonsChunkConfig(config, /\.(css|less|styl(us)?|scss|sass)$/);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> cssModules = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">const</span> cssLoaderOptions = &#123;</span><br><span class="line">                importLoaders: <span class="number">1</span>,</span><br><span class="line">                localIdentName: <span class="string">'[local]___[hash:base64:5]'</span></span><br><span class="line">            &#125;;</span><br><span class="line">            options.defaultLoaders = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultLoaders, &#123;</span><br><span class="line">                css: cssLoaderConfig(config, extractCSSPlugin, &#123;</span><br><span class="line">                    cssModules,</span><br><span class="line">                    cssLoaderOptions,</span><br><span class="line">                    dev,</span><br><span class="line">                    isServer</span><br><span class="line">                &#125;),</span><br><span class="line">                less: cssLoaderConfig(config, extractCSSPlugin, &#123;</span><br><span class="line">                    cssModules,</span><br><span class="line">                    cssLoaderOptions,</span><br><span class="line">                    dev,</span><br><span class="line">                    isServer,</span><br><span class="line">                    loaders: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                            options: cssLoaderOptions</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;),</span><br><span class="line">                stylus: cssLoaderConfig(config, extractCSSPlugin, &#123;</span><br><span class="line">                    cssModules,</span><br><span class="line">                    cssLoaderOptions,</span><br><span class="line">                    dev,</span><br><span class="line">                    isServer,</span><br><span class="line">                    loaders: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'stylus-loader'</span>,</span><br><span class="line">                            options: cssLoaderOptions</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;),</span><br><span class="line">                sass: cssLoaderConfig(config, extractCSSPlugin, &#123;</span><br><span class="line">                    cssModules,</span><br><span class="line">                    cssLoaderOptions,</span><br><span class="line">                    dev,</span><br><span class="line">                    isServer,</span><br><span class="line">                    loaders: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                            options: cssLoaderOptions</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            config.module.rules.push(&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: options.defaultLoaders.css</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: options.defaultLoaders.less</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.styl(us)?$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: options.defaultLoaders.stylus</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: options.defaultLoaders.sass</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.sass$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: options.defaultLoaders.sass</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Next-js-教程&quot;&gt;&lt;a href=&quot;#Next-js-教程&quot; class=&quot;headerlink&quot; title=&quot;Next.js 教程&quot;&gt;&lt;/a&gt;Next.js 教程&lt;/h1&gt;&lt;p&gt;🍭&lt;a href=&quot;https://github.com/zeit/next.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zeit/next.js&lt;/a&gt; || 🍭&lt;a href=&quot;https://learnnextjs.com/basics/getting-started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;learnnextjs.com&lt;/a&gt; 给出了相对比较完整的 Next.js 使用教程。&lt;/p&gt;
&lt;h1 id=&quot;引入样式文件&quot;&gt;&lt;a href=&quot;#引入样式文件&quot; class=&quot;headerlink&quot; title=&quot;引入样式文件&quot;&gt;&lt;/a&gt;引入样式文件&lt;/h1&gt;&lt;p&gt;刚刚接触 Next.js，还不是十分了解，第一个遇到的就是样式文件引入的问题，Next.js 支持样式文件引入，包括 &lt;code&gt;.css&lt;/code&gt;、&lt;code&gt;.less&lt;/code&gt;、&lt;code&gt;.styl&lt;/code&gt;、&lt;code&gt;.scss&lt;/code&gt;，如果仅需引入一种文件，可以 🍭&lt;a href=&quot;https://github.com/zeit/next.js#importing-css--sass--less--stylus-files&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;戳这里&lt;/a&gt;或者下面列出的模块，亲测可以解决样式引入的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🍭&lt;a href=&quot;https://github.com/zeit/next-plugins/tree/master/packages/next-css&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@zeit/next-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🍭&lt;a href=&quot;https://github.com/zeit/next-plugins/tree/master/packages/next-sass&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@zeit/next-sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🍭&lt;a href=&quot;https://github.com/zeit/next-plugins/tree/master/packages/next-less&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@zeit/next-less&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🍭&lt;a href=&quot;https://github.com/zeit/next-plugins/tree/master/packages/next-stylus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@zeit/next-stylus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;多种样式文件引入&quot;&gt;&lt;a href=&quot;#多种样式文件引入&quot; class=&quot;headerlink&quot; title=&quot;多种样式文件引入&quot;&gt;&lt;/a&gt;多种样式文件引入&lt;/h1&gt;&lt;p&gt;由于项目是团队开发，每个人的代码习惯会有所不同，那么，如果想引入多种文件就比较麻烦&lt;br&gt;我将以上模块进行了合并：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Next.js" scheme="https://christinamcqueen.github.io/tags/Next-js/"/>
    
      <category term="Webpack" scheme="https://christinamcqueen.github.io/tags/Webpack/"/>
    
      <category term="style-loader" scheme="https://christinamcqueen.github.io/tags/style-loader/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 异步编程</title>
    <link href="https://christinamcqueen.github.io/2018/04/16/Node/Javascript-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://christinamcqueen.github.io/2018/04/16/Node/Javascript-异步编程/</id>
    <published>2018-04-16T05:40:27.000Z</published>
    <updated>2018-05-11T02:52:36.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步-amp-异步"><a href="#同步-amp-异步" class="headerlink" title="同步 &amp; 异步"></a>同步 &amp; 异步</h1><ul><li><strong>单线程同步编程：</strong>每个任务按照先后顺序依次执行（阻塞）</li><li><strong>多线程模型：</strong>每一个任务由独立的线程控制，这些线程由操作系统管理。在一个多处理器或多核环境中可以真正实现多线程；在单处理器中，通过任务交替执行实现并发（非阻塞）</li></ul><p>由于一些比较古老的原因，Javascript 是单线程的，也就是说在同一时刻，浏览器进程中只有一个 Javascript 的线程在执行，并且阻塞其他任务执行<br><strong>为什么 Javascript 是单线程的：</strong></p><ul class="feature-positive"><li>轻量</li><li>简化并发模型，无死锁</li><li>没有线程切换开销</li></ul><p>但是如果碰到耗时比较长的任务，比如读取文件内容，会导致后面的任务无法继续进行下去。Javascript 在后期的发展中采用异步非阻塞编程模式解决多线程并行的问题，一个异步过程可以表述如下：</p><blockquote><ul><li>主线程发起一个异步请求，相应的 Worker 接收请求并告知主线程已收到请求（异步函数返回）</li><li>主线程可以继续执行后面的代码，同时 Worker 执行异步任务</li><li>Worker 完成工作后，通知主线程</li><li>主线程收到通知后，执行一定的动作（调用回调函数）</li></ul></blockquote><a id="more"></a><h1 id="异步的实现"><a href="#异步的实现" class="headerlink" title="异步的实现"></a>异步的实现</h1><p>现在，我们定义一个函数，用来读取指定目录下的全部文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻塞方式</span></span><br><span class="line"><span class="keyword">const</span> readDirSync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileList = fs.readdirSync(publicPath);</span><br><span class="line">    <span class="keyword">const</span> content = [];</span><br><span class="line">    fileList.forEach(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in loop:'</span>, fileName);</span><br><span class="line">        content.push(fs.readFileSync(path.resolve(publicPath, fileName), <span class="string">'utf8'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'done:'</span>, content.join(<span class="string">', '</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in loop: text.txt</span></span><br><span class="line"><span class="comment">// in loop: text2.txt</span></span><br><span class="line"><span class="comment">// done: This is a text file, This is a text file 2</span></span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>下面用回调函数的方式实现读取指定目录下的全部文件内容，回调函数将耗时的执行推迟到了后面执行实现了异步，没有阻塞后面函数的执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readDirCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fs.readdir(publicPath, (err, fileList) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read Dir '<span class="subst">$&#123;publicPath&#125;</span>' Error`</span>);</span><br><span class="line">        fileList.forEach(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.resolve(publicPath, fileName);</span><br><span class="line">            fs.readFile(filePath, <span class="string">'utf8'</span>, (error, file) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (error) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read File '<span class="subst">$&#123;filePath&#125;</span>' Error`</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(file.replace(<span class="string">'\n'</span>, <span class="string">''</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a text file</span></span><br><span class="line"><span class="comment">// This is a text file 2</span></span><br></pre></td></tr></table></figure><p>但是，上面的回调函数仅仅嵌套了两层，假设我们要实现更为复杂的功能，那么也许就会出现 <code>fn1(fn2(fn3(fn4(...))));</code> 这样的情况，传说中的 ‘Callback Hell’ 就会由此产生。回调函数最大的问题是函数之间高度耦合，维护困难</p><p><strong>优点：</strong></p><ul class="feature-positive"><li>简单</li><li>利于理解、部署</li></ul><p><strong>缺点：</strong></p><ul class="feature-negative"><li>可读性差</li><li>可维护性差</li><li>无法统一处理异常</li><li>无法灵活控制流程</li></ul><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>DOM 事件的异步方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#button'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'Button Clicked'</span>) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Button Clicked</span></span><br></pre></td></tr></table></figure><h2 id="订阅-发布"><a href="#订阅-发布" class="headerlink" title="订阅/发布"></a>订阅/发布</h2><p>Node.js 提供 events 模块，通过 <code>EventEmitter</code> 实例来触发事件，绑定在该事件上的函数被同步调用，所以需要确保事件的正确排序且避免竞争条件或逻辑错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readPubSub = <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">    fs.readdir(publicPath, (err, fileList) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read Dir '<span class="subst">$&#123;publicPath&#125;</span>' Error`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(fileList);</span><br><span class="line">        emitter.emit(<span class="string">'readFile'</span>, fileList);</span><br><span class="line">    &#125;);</span><br><span class="line">    emitter.on(<span class="string">'readFile'</span>, (fileList) =&gt; &#123;</span><br><span class="line">        fileList.forEach(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.resolve(publicPath, fileName);</span><br><span class="line">            fs.readFile(filePath, <span class="string">'utf8'</span>, (err, file) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read File '<span class="subst">$&#123;filePath&#125;</span>' Error`</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(file.replace(<span class="string">'\n'</span>, <span class="string">''</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 'text.txt', 'text2.txt' ]</span></span><br><span class="line"><span class="comment">// This is a text file 2</span></span><br><span class="line"><span class="comment">// This is a text file</span></span><br></pre></td></tr></table></figure><blockquote><p>监听器函数可以使用 <code>setImmediate()</code> 或 <code>process.nextTick()</code> 方法切换到异步操作模式：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, (a, b) =&gt; &#123;</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这个是异步发生的'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure><p>🍭<a href="http://nodejs.cn/api/events.html" target="_blank" rel="noopener">更多关于 EventEmitter</a></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>用 Promise 实现读取指定目录下文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readPromise = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> getFileList = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readdir(publicPath, (err, fileList) =&gt; (err ? reject(err) : resolve(fileList)));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> getFileContent = <span class="function"><span class="params">filePath</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(filePath, <span class="string">'utf8'</span>, (err, content) =&gt; (err ? reject(err) : resolve(content.replace(<span class="string">'\n'</span>, <span class="string">''</span>))));</span><br><span class="line">    &#125;);</span><br><span class="line">    getFileList().then(<span class="function"><span class="params">fileList</span> =&gt;</span> <span class="built_in">Promise</span>.all(fileList.map(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.resolve(publicPath, fileName);</span><br><span class="line">        <span class="keyword">return</span> getFileContent(filePath);</span><br><span class="line">    &#125;))).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.join(<span class="string">', '</span>));</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a text file, This is a text file 2</span></span><br></pre></td></tr></table></figure><p>与回调函数方式实现的异步相比，这段代码在视觉上清晰了许多，Promise 是典型的 Monad 风格，采用链式调用，每次产生新的 thenable 对象<br>但是，Promise 并没有真正消除 callback，只是利用 <code>then()</code> 延迟了 callback 的绑定</p><p><strong>优点：</strong></p><ul class="feature-positive"><li>关注点分离</li><li>一次性</li><li>可以单独处理异常，也可以统一处理</li></ul><p><strong>缺点：</strong></p><ul class="feature-negative"><li>“贪心”</li><li>无法取消</li><li>无法访问链式调用内部的值</li></ul><h2 id="Genertor"><a href="#Genertor" class="headerlink" title="Genertor"></a>Genertor</h2><p>Generator 函数可以彻底消除 callback，看起来 Generator 与订阅/发布模式有些类似，都是通过主动调用的方式，告诉程序什么时候该去执行下一步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readGenerator = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">ReadFile</span>(<span class="params">fileList</span>) </span>&#123;fileList.forEach(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.resolve(publicPath, fileName);</span><br><span class="line">            fs.readFile(filePath, <span class="string">'utf8'</span>, (err, file) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read File '<span class="subst">$&#123;filePath&#125;</span>' Error`</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(file.replace(<span class="string">'\n'</span>, <span class="string">''</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">ReadDir</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> fs.readdir(publicPath, (err, fileList) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Read Dir '<span class="subst">$&#123;publicPath&#125;</span>' Error`</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(fileList);</span><br><span class="line">            <span class="keyword">const</span> readFile = ReadFile(fileList);</span><br><span class="line">            readFile.next();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> readDir = ReadDir();</span><br><span class="line">    readDir.next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 'text.txt', 'text2.txt' ]</span></span><br><span class="line"><span class="comment">// This is a text file</span></span><br><span class="line"><span class="comment">// This is a text file 2</span></span><br></pre></td></tr></table></figure><p>🍭<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener">Generator MDN 文档</a></p><p>Generator 离不开🍭<a href="https://github.com/tj/co" target="_blank" rel="noopener">co 函数库</a>，核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><p>终于轮到 Async/Await 了，Async/Await 可以说是 javascript 异步编程最为优雅的一种实现方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readAsync = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> getFileList = <span class="keyword">async</span> () =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readdir(publicPath, (err, fileList) =&gt; (err ? reject(err) : resolve(fileList)));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> getFileContent = <span class="keyword">async</span> filePath =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(filePath, <span class="string">'utf8'</span>, (err, content) =&gt; (err ? reject(err) : resolve(content.replace(<span class="string">'\n'</span>, <span class="string">''</span>))));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> fileList = <span class="keyword">await</span> getFileList();</span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(fileList.map(<span class="keyword">async</span> (fileName) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.resolve(publicPath, fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> getFileContent(filePath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log(content.join(<span class="string">', '</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a text file, This is a text file 2</span></span><br></pre></td></tr></table></figure><p>Async/Await 看上去与 Promise 及其相似，不同的是 Async/Await 帮助我们处理了 then 链，同时，也不需要像 Generator 一样需要自己去维护内部 yield 的执行</p><p><strong>优点：</strong></p><ul class="feature-positive"><li>代码结构清晰</li><li>语义化友好</li><li>有利于代码维护</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同步-amp-异步&quot;&gt;&lt;a href=&quot;#同步-amp-异步&quot; class=&quot;headerlink&quot; title=&quot;同步 &amp;amp; 异步&quot;&gt;&lt;/a&gt;同步 &amp;amp; 异步&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单线程同步编程：&lt;/strong&gt;每个任务按照先后顺序依次执行（阻塞）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程模型：&lt;/strong&gt;每一个任务由独立的线程控制，这些线程由操作系统管理。在一个多处理器或多核环境中可以真正实现多线程；在单处理器中，通过任务交替执行实现并发（非阻塞）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于一些比较古老的原因，Javascript 是单线程的，也就是说在同一时刻，浏览器进程中只有一个 Javascript 的线程在执行，并且阻塞其他任务执行&lt;br&gt;&lt;strong&gt;为什么 Javascript 是单线程的：&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;feature-positive&quot;&gt;&lt;li&gt;轻量&lt;/li&gt;&lt;li&gt;简化并发模型，无死锁&lt;/li&gt;&lt;li&gt;没有线程切换开销&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;但是如果碰到耗时比较长的任务，比如读取文件内容，会导致后面的任务无法继续进行下去。Javascript 在后期的发展中采用异步非阻塞编程模式解决多线程并行的问题，一个异步过程可以表述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;主线程发起一个异步请求，相应的 Worker 接收请求并告知主线程已收到请求（异步函数返回）&lt;/li&gt;
&lt;li&gt;主线程可以继续执行后面的代码，同时 Worker 执行异步任务&lt;/li&gt;
&lt;li&gt;Worker 完成工作后，通知主线程&lt;/li&gt;
&lt;li&gt;主线程收到通知后，执行一定的动作（调用回调函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Promise" scheme="https://christinamcqueen.github.io/tags/Promise/"/>
    
      <category term="异步" scheme="https://christinamcqueen.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="读取目录" scheme="https://christinamcqueen.github.io/tags/%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95/"/>
    
      <category term="读取文件内容" scheme="https://christinamcqueen.github.io/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>关于 Node.js 中的多进程模型</title>
    <link href="https://christinamcqueen.github.io/2018/04/12/Node/%E5%85%B3%E4%BA%8E-Node-js-%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://christinamcqueen.github.io/2018/04/12/Node/关于-Node-js-中的多进程模型/</id>
    <published>2018-04-12T04:56:34.000Z</published>
    <updated>2018-05-11T02:04:12.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h1><h2 id="Node-js-如何榨干服务器资源享受多核-CPU？"><a href="#Node-js-如何榨干服务器资源享受多核-CPU？" class="headerlink" title="Node.js 如何榨干服务器资源享受多核 CPU？"></a>Node.js 如何榨干服务器资源享受多核 CPU？</h2><ul><li>Node.js 是运行在单线程上的，因此也就表示 Node.js 只能运行在一个 CPU 上</li><li>为了利用多核系统, Node.js 官方提供 🍭<a href="https://nodejs.org/api/cluster.html" target="_blank" rel="noopener">Cluster 模块</a> 作为解决方案</li></ul><h2 id="Cluster-是什么？"><a href="#Cluster-是什么？" class="headerlink" title="Cluster 是什么？"></a>Cluster 是什么？</h2><ul><li>在服务器上同时启动多个进程</li><li>每个进程里都跑的是同一份源代码</li><li>这些进程可以同时监听一个端口<!-- （🍭[深层原理戳这里](https://cnodejs.org/topic/56e84480833b7c8a0492e20c)） --></li></ul><p>其中</p><ul><li>负责启动其他进程的模块叫做 Master 进程，Master 只负责启动（<code>child_process.fork()</code> 方法）其他进程，不负责具体工作</li><li>其他被启动的进程称为 Worker 进程，负责接受请求，对外提供服务</li><li>Worker 数量一般由 CPU 核数确定，从而完美利用多核资源</li></ul><a id="more"></a><h2 id="Cluster-模块通过两种方式分发请求："><a href="#Cluster-模块通过两种方式分发请求：" class="headerlink" title="Cluster 模块通过两种方式分发请求："></a>Cluster 模块通过两种方式分发请求：</h2><ol><li>轮询（除 Windows 操作系统外的默认方法）：主进程监听端口，接收新的连接请求，并采用轮询方式分发给 Worker 进程以实现负载均衡</li><li>主进程创建监听套接字，将请求直接转发给相应 Worker</li></ol><p>理论上，第二种方法较好，然而在实践中，操作系统调度程序千差万别，导致负载更趋向于不平衡</p><h2 id="Node-js-不提供路由逻辑，因此需要专门创建一个-application-来管理-Session-或-Login-等信息，以避免过分依赖内存数据"><a href="#Node-js-不提供路由逻辑，因此需要专门创建一个-application-来管理-Session-或-Login-等信息，以避免过分依赖内存数据" class="headerlink" title="Node.js 不提供路由逻辑，因此需要专门创建一个 application 来管理 Session 或 Login 等信息，以避免过分依赖内存数据"></a>Node.js 不提供路由逻辑，因此需要专门创建一个 application 来管理 Session 或 Login 等信息，以避免过分依赖内存数据</h2><ul><li>由于 Worker 都是各自独立的进程，因此他们会在彼此互不影响的情况下，根据程序需要被 kill 或者重新创建</li><li>只要还有 alive 的 Worker，服务器就会继续接收连接请求，如果没有 alive 的 Worker，现有的连接会被丢弃，同时也不再接收新的连接请求</li><li>由于 Node.js 不会自动的管理 Worker 的数量，application 也需要根据自己的需求来管理 Worker 池</li></ul><hr><h1 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h1><h2 id="父子进程的相互影响"><a href="#父子进程的相互影响" class="headerlink" title="父子进程的相互影响"></a>父子进程的相互影响</h2><ul><li>当一个子进程退出时，并不立刻清空进程表，而是向父进程发送一个信号。父进程需要对此应答，然后系统会完全清除子进程。假设父进程没有应答，或者应答之前子进程退出，子进程会被系统设置为‘僵尸’状态</li><li>当一个父进程退出时，如果有几个子进程仍在运行，这些子进程会变成‘孤儿进程’。‘孤儿进程’会立刻被‘init’超级进程接管，作为其父进程。‘init’进程能够确保这些子进程在退出时不会变为‘僵尸进程’，因为‘init’进程总是应答子进程的退出</li></ul><h2 id="POSIX-是什么？POSIX-的-fork-与-child-process-fork-又何不同"><a href="#POSIX-是什么？POSIX-的-fork-与-child-process-fork-又何不同" class="headerlink" title="POSIX 是什么？POSIX 的 fork() 与 child_process.fork() 又何不同"></a>POSIX 是什么？POSIX 的 <code>fork()</code> 与 <code>child_process.fork()</code> 又何不同</h2><ul><li>POSIX 是线程的 POSIX 标准，该标准定义了创建和操作线程的一套 API</li><li><code>child_process.fork()</code> 不会 clone 当前进程，而 POSIX 的 <code>fork()</code> 会复制父进程的‘内存页’</li></ul><p><code>child_process.fork()</code> 是 <code>child_process.spawn()</code> 创建子进程的一种特殊方式，两者都返回新创建的子进程，但是通过 <code>child_process.fork()</code> 创建的子进程会默认开启进程间通信</p><h2 id="POSIX-的进程间通信（IPC）"><a href="#POSIX-的进程间通信（IPC）" class="headerlink" title="POSIX 的进程间通信（IPC）"></a>POSIX 的进程间通信（IPC）</h2><ul><li><code>pipe()</code>：只能在父-子进程间使用；单向通信；<strong>传输字节流，读写顺序一致；不会丢失数据</strong></li><li><code>mkfifo()</code>：命名管道，操作方式与操作文件类似</li><li><code>socket()</code>：与管道相似；进程间可以不想管；双向通信</li><li><code>mmap()</code> 创建内存映射：映射同一个文件同一个区域，共享相同的‘物理内存页’；通过 <code>fork()</code> 创建的子进程，会复制父进程的‘内存页’，可以在这些内存页中映射共享内存</li><li>消息队列</li><li>信号量</li><li>共享内存</li></ul><h2 id="Node-js-创建子进程的几种方式"><a href="#Node-js-创建子进程的几种方式" class="headerlink" title="Node.js 创建子进程的几种方式"></a>Node.js 创建子进程的几种方式</h2><ul><li>spawn()</li><li>exec()</li><li>execFile()</li><li>fork()</li></ul><h1 id="Node-js-的进程守护"><a href="#Node-js-的进程守护" class="headerlink" title="Node.js 的进程守护"></a>Node.js 的进程守护</h1><ul><li>鲁棒性（即健壮性）是 Node.js 所面临的一大问题，由于 Node.js 是单线程的，所以它最大的问题是不够稳定，不适合处理复杂业务</li><li><p>捕获 Node.js 的异常可以有以下方式：</p><blockquote><ol><li><code>process.on(&#39;uncaughtException&#39;, callback())</code></li><li><code>try/catch</code></li></ol></blockquote></li><li><p>进程守护可以采用插件（supervisor、forever、pm2 等）</p></li></ul><hr><p>ps：推荐使用进程管理器 pm2，带有负载均衡功能，配置简单，启动方便，秒速重载（小程序、钉钉企业微应用等需要签名验证功能请开启单核）</p><p>pps：一些常用的负载均衡算法：</p><ul><li>随机算法</li><li>轮询及加权轮询</li><li>最小连接及加权最小连接</li><li>哈希算法</li><li>IP 地址散列</li><li>URL 散列</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多进程模型&quot;&gt;&lt;a href=&quot;#多进程模型&quot; class=&quot;headerlink&quot; title=&quot;多进程模型&quot;&gt;&lt;/a&gt;多进程模型&lt;/h1&gt;&lt;h2 id=&quot;Node-js-如何榨干服务器资源享受多核-CPU？&quot;&gt;&lt;a href=&quot;#Node-js-如何榨干服务器资源享受多核-CPU？&quot; class=&quot;headerlink&quot; title=&quot;Node.js 如何榨干服务器资源享受多核 CPU？&quot;&gt;&lt;/a&gt;Node.js 如何榨干服务器资源享受多核 CPU？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js 是运行在单线程上的，因此也就表示 Node.js 只能运行在一个 CPU 上&lt;/li&gt;
&lt;li&gt;为了利用多核系统, Node.js 官方提供 🍭&lt;a href=&quot;https://nodejs.org/api/cluster.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cluster 模块&lt;/a&gt; 作为解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Cluster-是什么？&quot;&gt;&lt;a href=&quot;#Cluster-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Cluster 是什么？&quot;&gt;&lt;/a&gt;Cluster 是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在服务器上同时启动多个进程&lt;/li&gt;
&lt;li&gt;每个进程里都跑的是同一份源代码&lt;/li&gt;
&lt;li&gt;这些进程可以同时监听一个端口&lt;!-- （🍭[深层原理戳这里](https://cnodejs.org/topic/56e84480833b7c8a0492e20c)） --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责启动其他进程的模块叫做 Master 进程，Master 只负责启动（&lt;code&gt;child_process.fork()&lt;/code&gt; 方法）其他进程，不负责具体工作&lt;/li&gt;
&lt;li&gt;其他被启动的进程称为 Worker 进程，负责接受请求，对外提供服务&lt;/li&gt;
&lt;li&gt;Worker 数量一般由 CPU 核数确定，从而完美利用多核资源&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://christinamcqueen.github.io/tags/Node-js/"/>
    
      <category term="进程" scheme="https://christinamcqueen.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BFC 在布局中的应用</title>
    <link href="https://christinamcqueen.github.io/2018/03/30/BFC/BFC-%E5%9C%A8%E5%B8%83%E5%B1%80%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://christinamcqueen.github.io/2018/03/30/BFC/BFC-在布局中的应用/</id>
    <published>2018-03-30T09:23:40.000Z</published>
    <updated>2018-05-11T02:04:11.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="防止-margin-重叠（塌陷）"><a href="#防止-margin-重叠（塌陷）" class="headerlink" title="防止 margin 重叠（塌陷）"></a>防止 margin 重叠（塌陷）</h1><h2 id="相邻-Box-垂直重叠"><a href="#相邻-Box-垂直重叠" class="headerlink" title="相邻 Box 垂直重叠"></a>相邻 Box 垂直重叠</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vertical-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    margin: 50px auto;</span></span><br><span class="line"><span class="undefined">    line-height: 50px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    color: #b8d990;</span></span><br><span class="line"><span class="undefined">    background: #422468;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><div class="vertical-wrap"><p>BOX 1</p><p>BOX 2</p></div><p>两个 p 标签的 margin 为 40px，发生了 margin 重叠，中间距离为两个标签 margin 最大一个为标准，<br>如果将包裹两个标签的容器定义为一个 BFC，那么两个标签则不属于同一个 BFC，就不会发生 margin 重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bfc"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>BOX 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    line-height: 50px;</span></span><br><span class="line"><span class="undefined">    margin: 50px auto;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    color: #b8d990;</span></span><br><span class="line"><span class="undefined">    background: #422468;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.bfc &#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="vertical-wrap"><p>BOX 1</p><div class="bfc"><p>BOX 2</p></div></div><h2 id="相邻-Box-水平重叠"><a href="#相邻-Box-水平重叠" class="headerlink" title="相邻 Box 水平重叠"></a>相邻 Box 水平重叠</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"horizontal-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-f2dbf9"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-pink"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-green"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.horizontal-wrap &#123;</span></span><br><span class="line"><span class="undefined">    writing-mode: vertical-lr;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.horizontal-wrap .item &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin: 10px;</span></span><br><span class="line"><span class="undefined">    line-height: 100px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    color: #251f0f;</span></span><br><span class="line"><span class="undefined">    writing-mode: lr;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="horizontal-wrap"><div class="item bg-f2dbf9">LEFT</div><div class="item bg-f9dbe2">MIDDL</div><div class="item bg-e2f9db">RIGHT</div></div><p>三个 BOX 在水平方向上发生了重叠，如果使每个 BOX 生成一个新的 BFC，则三个 BOX 不在同一个 BFC 下，便不会发生 margin 重叠</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"horizontal-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-f2dbf9"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-f9dbe2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-e2f9db"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.horizontal-wrap .item &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin: 10px;</span></span><br><span class="line"><span class="undefined">    line-height: 100px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    color: #251f0f;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="horizontal-wrap bfc"><div class="item bg-f2dbf9">LEFT</div><div class="item bg-f9dbe2">MIDDL</div><div class="item bg-e2f9db">RIGHT</div></div><h2 id="嵌套元素重叠"><a href="#嵌套元素重叠" class="headerlink" title="嵌套元素重叠"></a>嵌套元素重叠</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"squire bg-dbf9f2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nest-wrap bg-dbe2f9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item bg-f2dbf9"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item bg-f9dbe2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item bg-e2f9db"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.squire &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.nest-wrap &#123;</span></span><br><span class="line"><span class="undefined">    margin: 25px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.nest-wrap .item &#123;</span></span><br><span class="line"><span class="undefined">    margin: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="squire bg-dbf9f2"></div><ul class="nest-wrap bg-dbe2f9"><li class="item bg-f2dbf9">1</li><li class="item bg-f9dbe2">2</li><li class="item bg-e2f9db">3</li></ul><br><br>要避免嵌套元素发生 margin 重叠，可以让 ul 元素生成 BFC<br><br><div class="squire bg-dbf9f2"></div><ul class="nest-wrap bfc bg-dbe2f9"><li class="item bg-f2dbf9">1</li><li class="item bg-f9dbe2">2</li><li class="item bg-e2f9db">3</li></ul><br><br># 清除内部浮动<br><br><div class="border-dbe2f9 border-heavy"><div class="border-f2dbf9 border-heavy fl-child"></div><div class="border-f9dbe2 border-heavy fl-child"></div></div><div class="clear"></div><p>为清除内部浮动，可以使父元素生成 BFC</p><div class="border-dbe2f9 border-heavy bfc"><div class="border-f2dbf9 border-heavy fl-child"></div><div class="border-f9dbe2 border-heavy fl-child"></div></div><style type="text/css">.border-heavy {    border-width: 10px;}.vertical-wrap > p {    width: 200px;    line-height: 50px;    text-align: center;    font-size: 18px;    color: #b8d990;    background: #422468;}.vertical-wrap p:first-child {    margin: 0 auto 50px;}.vertical-wrap p:last-child {    margin: 50px auto 0;}.bfc {    overflow: hidden;}.vertical-wrap .bfc > p {    width: 200px;    margin: 50px auto 0;    line-height: 50px;    font-size: 18px;    text-align: center;    color: #b8d990;    background: #422468;}.horizontal-wrap {    writing-mode: vertical-lr;    position: relative;    left: 50%;    transform: translateX(-50%);}.horizontal-wrap .item {    width: 100px;    height: 100px;    margin: 10px;    line-height: 100px;    text-align: center;    color: #251f0f;    writing-mode: lr;}.horizontal-wrap.bfc {    writing-mode: initial;    text-align: center;}.horizontal-wrap.bfc .item {    display: inline-block;    writing-mode: initial;}.squire {    width: 100px;    height: 100px;}.nest-wrap {    margin: 25px;}.nest-wrap .item {    margin: 50px;}.fl-child {    float: left;    width: 100px;    height: 100px;}</style>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;防止-margin-重叠（塌陷）&quot;&gt;&lt;a href=&quot;#防止-margin-重叠（塌陷）&quot; class=&quot;headerlink&quot; title=&quot;防止 margin 重叠（塌陷）&quot;&gt;&lt;/a&gt;防止 margin 重叠（塌陷）&lt;/h1&gt;&lt;h2 id=&quot;相邻-Box-垂直重叠&quot;&gt;&lt;a href=&quot;#相邻-Box-垂直重叠&quot; class=&quot;headerlink&quot; title=&quot;相邻 Box 垂直重叠&quot;&gt;&lt;/a&gt;相邻 Box 垂直重叠&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vertical-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;BOX 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;BOX 2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;p &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    width: 200px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    margin: 50px auto;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    line-height: 50px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    text-align: center;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    color: #b8d990;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    background: #422468;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
      <category term="BFC" scheme="https://christinamcqueen.github.io/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>BFC 原理</title>
    <link href="https://christinamcqueen.github.io/2018/03/30/BFC/BFC-%E5%8E%9F%E7%90%86/"/>
    <id>https://christinamcqueen.github.io/2018/03/30/BFC/BFC-原理/</id>
    <published>2018-03-30T07:28:11.000Z</published>
    <updated>2018-05-11T02:04:11.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BFC（Block-Formatting-Context）：块级格式化上下文"><a href="#BFC（Block-Formatting-Context）：块级格式化上下文" class="headerlink" title="BFC（Block Formatting Context）：块级格式化上下文"></a>BFC（Block Formatting Context）：块级格式化上下文</h1><p>BFC 是一个独立渲染区域，只有 Block-Level Box 参与，规定了 Block-Level Box 内部区域如何布局</p><h1 id="BFC-的生成"><a href="#BFC-的生成" class="headerlink" title="BFC 的生成"></a>BFC 的生成</h1><p>满足下列条件之一，会生成 BFC</p><a id="more"></a><ul><li>根元素</li><li>float: left | right</li><li>overflow: hidden | auto | scroll</li><li>display: inline-block | table-cell | table-caption | table<blockquote><p>table 会默认生成一个匿名的 table-cell，因此 table 也会生成新的 BFC</p></blockquote></li><li>position: absolute | fixed</li></ul><h1 id="BFC-的约束规则"><a href="#BFC-的约束规则" class="headerlink" title="BFC 的约束规则"></a>BFC 的约束规则</h1><ul><li>内部的 Box 会在垂直方向上一个接一个的放置</li><li>垂直方向上的距离由 margin 决定（属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠（塌陷），与方向无关）</li><li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明 BFC 中子元素不会超出他的包含块，而 position 为 absolute 的元素可以超出他的包含块边界）</li><li>BFC 的区域不会与 float 的元素区域重叠</li><li>计算 BFC 的高度时，浮动子元素也参与计算</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然（计算 BFC 的高度时，浮动元素也参与计算）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BFC（Block-Formatting-Context）：块级格式化上下文&quot;&gt;&lt;a href=&quot;#BFC（Block-Formatting-Context）：块级格式化上下文&quot; class=&quot;headerlink&quot; title=&quot;BFC（Block Formatting Context）：块级格式化上下文&quot;&gt;&lt;/a&gt;BFC（Block Formatting Context）：块级格式化上下文&lt;/h1&gt;&lt;p&gt;BFC 是一个独立渲染区域，只有 Block-Level Box 参与，规定了 Block-Level Box 内部区域如何布局&lt;/p&gt;
&lt;h1 id=&quot;BFC-的生成&quot;&gt;&lt;a href=&quot;#BFC-的生成&quot; class=&quot;headerlink&quot; title=&quot;BFC 的生成&quot;&gt;&lt;/a&gt;BFC 的生成&lt;/h1&gt;&lt;p&gt;满足下列条件之一，会生成 BFC&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
      <category term="BFC" scheme="https://christinamcqueen.github.io/tags/BFC/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 4 踩坑指南</title>
    <link href="https://christinamcqueen.github.io/2018/03/08/Tool/Webpack-4-%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://christinamcqueen.github.io/2018/03/08/Tool/Webpack-4-踩坑指南/</id>
    <published>2018-03-08T01:18:13.000Z</published>
    <updated>2018-05-11T02:04:12.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Update-to-Webpack-4"><a href="#Update-to-Webpack-4" class="headerlink" title="Update to Webpack 4"></a>Update to Webpack 4</h1><p><code>yarn upgrade webpack</code></p><h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><p>启动后，启动信息会有 4 个 Warning 提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configuration</span><br><span class="line">The <span class="string">'mode'</span> option has not been <span class="built_in">set</span>, webpack will fallback to <span class="string">'production'</span> <span class="keyword">for</span> this value. Set <span class="string">'mode'</span> option to <span class="string">'development'</span> or <span class="string">'production'</span> to <span class="built_in">enable</span> defaults <span class="keyword">for</span> each environment.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asset size <span class="built_in">limit</span>: The following asset(s) exceed the recommended size <span class="built_in">limit</span> (244 KiB).</span><br><span class="line">This can impact web performance.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entrypoint size <span class="built_in">limit</span>: The following entrypoint(s) combined asset size exceeds the recommended <span class="built_in">limit</span> (244 KiB). This can impact web performance.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack performance recommendations:</span><br><span class="line">You can <span class="built_in">limit</span> the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</span><br></pre></td></tr></table></figure><h1 id="解决方法：在配置中添加-mode-属性："><a href="#解决方法：在配置中添加-mode-属性：" class="headerlink" title="解决方法：在配置中添加 mode 属性："></a>解决方法：在配置中添加 <code>mode</code> 属性：</h1><p>开发环境：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    mode: 'development'</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产环境</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    mode: 'production'</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重新启动项目，警告消失"><a href="#重新启动项目，警告消失" class="headerlink" title="重新启动项目，警告消失"></a>重新启动项目，警告消失</h1><p>目测启动速度更快，暂未做相关测试</p><p>待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Update-to-Webpack-4&quot;&gt;&lt;a href=&quot;#Update-to-Webpack-4&quot; class=&quot;headerlink&quot; title=&quot;Update to Webpack 4&quot;&gt;&lt;/a&gt;Update to Webpack 4&lt;/h1&gt;&lt;p&gt;&lt;c
      
    
    </summary>
    
    
      <category term="Webpack" scheme="https://christinamcqueen.github.io/tags/Webpack/"/>
    
      <category term="Webpack 4" scheme="https://christinamcqueen.github.io/tags/Webpack-4/"/>
    
      <category term="mode" scheme="https://christinamcqueen.github.io/tags/mode/"/>
    
  </entry>
  
  <entry>
    <title>Npm/yarn 设置下载源</title>
    <link href="https://christinamcqueen.github.io/2017/11/20/Tool/npm-yarn-%E8%AE%BE%E7%BD%AE%E4%B8%8B%E8%BD%BD%E6%BA%90/"/>
    <id>https://christinamcqueen.github.io/2017/11/20/Tool/npm-yarn-设置下载源/</id>
    <published>2017-11-20T06:14:37.000Z</published>
    <updated>2018-05-11T02:04:12.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nrm-——-快速切换-NPM-源"><a href="#nrm-——-快速切换-NPM-源" class="headerlink" title="nrm —— 快速切换 NPM 源"></a>nrm —— 快速切换 NPM 源</h1><p><code>npm install -g nrm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - http://registry.npm.taobao.org/</span><br><span class="line">  eu ----- http://registry.npmjs.eu/</span><br><span class="line">  au ----- http://registry.npmjs.org.au/</span><br><span class="line">  sl ----- http://npm.strongloop.com/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="切换到-taobao"><a href="#切换到-taobao" class="headerlink" title="切换到 taobao"></a>切换到 taobao</h2><p><code>nrm use taobao</code></p><h2 id="增加源"><a href="#增加源" class="headerlink" title="增加源"></a>增加源</h2><p><code>nrm add  &lt;registry&gt; &lt;url&gt; [home]</code></p><h2 id="删除源"><a href="#删除源" class="headerlink" title="删除源"></a>删除源</h2><p><code>nrm del &lt;registry&gt;</code></p><h2 id="测试所有源的响应时间"><a href="#测试所有源的响应时间" class="headerlink" title="测试所有源的响应时间"></a>测试所有源的响应时间</h2><p><code>nrm test</code></p><h1 id="yarn-查看下载源"><a href="#yarn-查看下载源" class="headerlink" title="yarn 查看下载源"></a>yarn 查看下载源</h1><p><code>yarn config get registry</code></p><h1 id="更换为淘宝源"><a href="#更换为淘宝源" class="headerlink" title="更换为淘宝源"></a>更换为淘宝源</h1><p><code>yarn config set registry https://registry.npm.taobao.org</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nrm-——-快速切换-NPM-源&quot;&gt;&lt;a href=&quot;#nrm-——-快速切换-NPM-源&quot; class=&quot;headerlink&quot; title=&quot;nrm —— 快速切换 NPM 源&quot;&gt;&lt;/a&gt;nrm —— 快速切换 NPM 源&lt;/h1&gt;&lt;p&gt;&lt;code&gt;npm install -g nrm&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* npm ---- https://registry.npmjs.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cnpm --- http://r.cnpmjs.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taobao - http://registry.npm.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eu ----- http://registry.npmjs.eu/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  au ----- http://registry.npmjs.org.au/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sl ----- http://npm.strongloop.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nj ----- https://registry.nodejitsu.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://christinamcqueen.github.io/tags/Node-js/"/>
    
      <category term="npm" scheme="https://christinamcqueen.github.io/tags/npm/"/>
    
      <category term="yarn" scheme="https://christinamcqueen.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 Node.js 应用</title>
    <link href="https://christinamcqueen.github.io/2017/10/27/Tool/Docker-%E9%83%A8%E7%BD%B2-Node-js-%E5%BA%94%E7%94%A8/"/>
    <id>https://christinamcqueen.github.io/2017/10/27/Tool/Docker-部署-Node-js-应用/</id>
    <published>2017-10-27T06:46:28.000Z</published>
    <updated>2018-05-11T02:04:12.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置基础镜像,如果本地没有该镜像，会从Docker.io服务器pull镜像</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">node</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app目录,保存我们的代码</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">mkdir</span> <span class="bullet">-p</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制所有文件到 工作目录。</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">.</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译运行node项目，使用npm安装程序的所有依赖,利用taobao的npm安装，可省略</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">--registry=https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露container的端口</span></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行命令</span></span><br><span class="line"><span class="string">CMD</span> <span class="string">["npm",</span> <span class="string">"start"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><h1 id="构建-Image"><a href="#构建-Image" class="headerlink" title="构建 Image"></a>构建 Image</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">build</span> <span class="bullet">-t</span> <span class="string">image_name</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><h1 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="bullet">-d</span> <span class="bullet">--name</span> <span class="string">container_name</span> <span class="bullet">-p</span> <span class="number">8888</span><span class="string">:8888</span> <span class="attr">image_name:latest</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建-Dockerfile&quot;&gt;&lt;a href=&quot;#创建-Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;创建 Dockerfile&quot;&gt;&lt;/a&gt;创建 Dockerfile&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://christinamcqueen.github.io/tags/Node-js/"/>
    
      <category term="Docker" scheme="https://christinamcqueen.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CSS 现代方法论</title>
    <link href="https://christinamcqueen.github.io/2017/10/25/CSS%E7%9B%B8%E5%85%B3/%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>https://christinamcqueen.github.io/2017/10/25/CSS相关/现代方法论/</id>
    <published>2017-10-25T02:55:18.000Z</published>
    <updated>2018-05-11T02:04:12.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h1><h2 id="解决了"><a href="#解决了" class="headerlink" title="解决了"></a>解决了</h2><ul class="feature-positive"><li>全局命名空间，每一条样式都可能被覆盖或重定义（CSS4-scope 属性）</li><li>难以管理依赖关系</li><li>难经消除死代码，在实际运行之前，无法确定特定的 CSS 是否起会用到</li><li>难以共享变量，特别是 CSS 与 JS 之间</li><li>难以压缩，minify 效果有限</li><li>非确定性的样式（异步载入 CSS 文件的顺序可能影响最终样式呈现）</li><li>难以隔离组件（除 shadow-dom 和 scope 属性外）</li><li>复杂混乱的选择器优先级运算</li><li>不支持抽象与复用</li></ul><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ul class="feature-negative"><li>绝大部分只适用于 React 生态</li><li>不能使用 Less/Scss/Stylus 等预处理器</li><li>不能使用 postcss</li><li>实现五花八门，没有标准</li><li>不能解决所有问题，比如 animation、css reset 等等</li><li>代码混乱，历史的倒车</li><li>有些实现可能会不尽如人意，如伪类、媒体查询等等</li><li>难以修改样式</li><li>组件库样式难以跨项目共用</li></ul><a id="more"></a><h1 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h1><p>思考</p><blockquote><p>全局 CSS 样式（动画库、css reset、第三方组件样式）与 CSS Modules 如何共存？<br>如何在组件外部修改组件内特定样式？<br>Vue 的 scoped style 与 CSS Modules 有何不同？scoped style有何风险？<br>同样是 JS 管理样式，CSS Modules 与 CSS in JS 的差异是什么？</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-in-JS&quot;&gt;&lt;a href=&quot;#CSS-in-JS&quot; class=&quot;headerlink&quot; title=&quot;CSS in JS&quot;&gt;&lt;/a&gt;CSS in JS&lt;/h1&gt;&lt;h2 id=&quot;解决了&quot;&gt;&lt;a href=&quot;#解决了&quot; class=&quot;headerlink&quot; title=&quot;解决了&quot;&gt;&lt;/a&gt;解决了&lt;/h2&gt;&lt;ul class=&quot;feature-positive&quot;&gt;&lt;li&gt;全局命名空间，每一条样式都可能被覆盖或重定义（CSS4-scope 属性）&lt;/li&gt;&lt;li&gt;难以管理依赖关系&lt;/li&gt;&lt;li&gt;难经消除死代码，在实际运行之前，无法确定特定的 CSS 是否起会用到&lt;/li&gt;&lt;li&gt;难以共享变量，特别是 CSS 与 JS 之间&lt;/li&gt;&lt;li&gt;难以压缩，minify 效果有限&lt;/li&gt;&lt;li&gt;非确定性的样式（异步载入 CSS 文件的顺序可能影响最终样式呈现）&lt;/li&gt;&lt;li&gt;难以隔离组件（除 shadow-dom 和 scope 属性外）&lt;/li&gt;&lt;li&gt;复杂混乱的选择器优先级运算&lt;/li&gt;&lt;li&gt;不支持抽象与复用&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id=&quot;缺陷&quot;&gt;&lt;a href=&quot;#缺陷&quot; class=&quot;headerlink&quot; title=&quot;缺陷&quot;&gt;&lt;/a&gt;缺陷&lt;/h2&gt;&lt;ul class=&quot;feature-negative&quot;&gt;&lt;li&gt;绝大部分只适用于 React 生态&lt;/li&gt;&lt;li&gt;不能使用 Less/Scss/Stylus 等预处理器&lt;/li&gt;&lt;li&gt;不能使用 postcss&lt;/li&gt;&lt;li&gt;实现五花八门，没有标准&lt;/li&gt;&lt;li&gt;不能解决所有问题，比如 animation、css reset 等等&lt;/li&gt;&lt;li&gt;代码混乱，历史的倒车&lt;/li&gt;&lt;li&gt;有些实现可能会不尽如人意，如伪类、媒体查询等等&lt;/li&gt;&lt;li&gt;难以修改样式&lt;/li&gt;&lt;li&gt;组件库样式难以跨项目共用&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 选择器的优先级</title>
    <link href="https://christinamcqueen.github.io/2017/10/24/CSS%E7%9B%B8%E5%85%B3/%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://christinamcqueen.github.io/2017/10/24/CSS相关/选择器的优先级/</id>
    <published>2017-10-24T07:19:30.000Z</published>
    <updated>2018-05-11T02:04:12.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择器优先级排序"><a href="#选择器优先级排序" class="headerlink" title="选择器优先级排序"></a>选择器优先级排序</h1><p>简短而言，选择器的优先级可以按照如下方式排序：<br><code>内联 &gt; ID 选择器 &gt; 伪类 = 属性选择器 = 类选择器 &gt; 元素选择器[p] &gt; 通用选择器(*) &gt; 继承样式</code></p><p>BUT，CSS 选择器究竟是如何计算优先级的？</p><h1 id="优先级计算规则"><a href="#优先级计算规则" class="headerlink" title="优先级计算规则"></a>优先级计算规则</h1><p>例如，有如下选择器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.myclassname</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其优先级计算结果为：</p><a id="more"></a><ul class="wrap selector"><li class="selector-wrap"><span>Inline</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>IDs</span><div class="selector-priority">1</div></li><li class="selector-wrap"><span>Classes</span><div class="selector-priority">2</div><span class="sub-text">&amp; pseudo class<br>&amp; attributes</span></li><li class="selector-wrap"><span>Elements</span><div class="selector-priority">3</div><span class="sub-text">&amp; pseudo Elements</span></li></ul><p>再如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123;&#125;</span><br></pre></td></tr></table></figure><ul class="wrap selector"><li class="selector-wrap"><span>Inline</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>IDs</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>Classes</span><div class="selector-priority">0</div><span class="sub-text">&amp; pseudo class<br>&amp; attributes</span></li><li class="selector-wrap"><span>Elements</span><div class="selector-priority">0</div><span class="sub-text">&amp; pseudo Elements</span></li></ul><p>再再如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="wrap selector"><li class="selector-wrap"><span>Inline</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>IDs</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>Classes</span><div class="selector-priority">1</div><span class="sub-text">&amp; pseudo class<br>&amp; attributes</span></li><li class="selector-wrap"><span>Elements</span><div class="selector-priority">0</div><span class="sub-text">&amp; pseudo Elements</span></li></ul><ul class="wrap selector"><li class="selector-wrap"><span>Inline</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>IDs</span><div class="selector-priority">0</div></li><li class="selector-wrap"><span>Classes</span><div class="selector-priority">0</div><span class="sub-text">&amp; pseudo class<br>&amp; attributes</span></li><li class="selector-wrap"><span>Elements</span><div class="selector-priority">10</div><span class="sub-text">&amp; pseudo Elements</span></li></ul><p class="pri-wrap"><span><span><span><span><span><span><span><span><span class="blue">上面谁的优先级更高？？？(经测试此处与 CSS 的顺序无关)</span></span></span></span></span></span></span></span></span></p><blockquote><p>另外，优先级相同的情况下，class 在 HTML 中的书写顺序并不会影响样式呈现。</p></blockquote><p>如果加了 <code>!important</code> 呢？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.nav</span> <span class="selector-class">.item</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="wrap selector"><li class="selector-wrap"><div class="selector-priority">0</div></li><li class="selector-wrap"><div class="selector-priority">1</div></li><li class="selector-wrap"><div class="selector-priority">2</div></li><li class="selector-wrap"><div class="selector-priority">2</div></li><li class="selector-wrap"><div class="selector-priority">0</div></li><li class="selector-wrap"><div class="selector-priority">0</div></li><li class="selector-wrap"><div class="selector-priority">0</div></li><li class="selector-wrap"><div class="selector-priority">0</div></li></ul><p>样式优先级如下：</p><div class="wrap"><br>    <div class="total-important"><span class="total-text">!important</span><ul class="total-wrap"><li>IDs</li><li>Classes</li><li>Elements</li></ul><br>    </div><br>    <div class="total-inline"><span class="total-text">Inline</span><ul class="total-wrap"><li>Inline</li></ul><br>    </div><br>    <div class="total-normal"><span class="total-text">Normal</span><ul class="total-wrap"><li>IDs</li><li>Classes</li><li>Elements</li></ul><br>    </div><br></div><blockquote><p>关于性能：CSS 选择器总是从右向左匹配；最右边的选择器匹配到的元素越少越好。</p></blockquote><style type="text/css">.selector {    display: flex;}.selector-wrap {    flex: 1;    margin: 10px;    display: inline-block;    text-align: center;}.selector-priority {    border: 2px solid #000;    height: 80px;    display: flex;    align-items: center;    justify-content: center;    font-size: 25px;}.pri-wrap {    text-align: center;}.blue {    color: blue;    font-size: 20px;}p span span span span span span span span span {    color: red;}.total-important {    color: #ff4500;}.total-inline {    color: #ffd700;}.total-normal {    color: #1e90ff;}.total-wrap {    margin: 0 20px;    padding: 0 20px;    border: 2px solid;    display: inline-block;    text-align: center;}.total-wrap > li {    list-style: none !important;    margin: 0;    padding: 10px 0;    border-top: 2px solid #f5f5f5;    width: 140px;}.total-wrap > li:first-child {    border-top: none;}.total-text {    vertical-align: top;    display: inline-block;    width: 100px;    text-align: right;    margin-top: 8px;}</style>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;选择器优先级排序&quot;&gt;&lt;a href=&quot;#选择器优先级排序&quot; class=&quot;headerlink&quot; title=&quot;选择器优先级排序&quot;&gt;&lt;/a&gt;选择器优先级排序&lt;/h1&gt;&lt;p&gt;简短而言，选择器的优先级可以按照如下方式排序：&lt;br&gt;&lt;code&gt;内联 &amp;gt; ID 选择器 &amp;gt; 伪类 = 属性选择器 = 类选择器 &amp;gt; 元素选择器[p] &amp;gt; 通用选择器(*) &amp;gt; 继承样式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;BUT，CSS 选择器究竟是如何计算优先级的？&lt;/p&gt;
&lt;h1 id=&quot;优先级计算规则&quot;&gt;&lt;a href=&quot;#优先级计算规则&quot; class=&quot;headerlink&quot; title=&quot;优先级计算规则&quot;&gt;&lt;/a&gt;优先级计算规则&lt;/h1&gt;&lt;p&gt;例如，有如下选择器：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#nav&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.myclassname&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其优先级计算结果为：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus-Node.js性能监测</title>
    <link href="https://christinamcqueen.github.io/2017/10/20/Node/Prometheus-Node-js%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B/"/>
    <id>https://christinamcqueen.github.io/2017/10/20/Node/Prometheus-Node-js性能监测/</id>
    <published>2017-10-20T07:23:32.000Z</published>
    <updated>2018-05-11T02:04:12.126Z</updated>
    
    <content type="html"><![CDATA[<p>🍭<a href="https://prometheus.io/download/" target="_blank" rel="noopener">Prometheus 下载</a><br>🍭<a href="https://prometheus.io/docs/introduction/getting_started/" target="_blank" rel="noopener">参考链接</a></p><h1 id="GETTING-STARTED"><a href="#GETTING-STARTED" class="headerlink" title="GETTING STARTED"></a>GETTING STARTED</h1><p>本指南是一个“Hello World”形式的教程，它以一个简单的示例介绍了如何安装，配置和使用 Prometheus。您将在本地下载并运行 Prometheus，将其配置并监测其自身和示例应用程序，然后使用查询，规则和图表等来利用收集的时间序列数据。</p><p><strong>Downloading and running Prometheus</strong><br>待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🍭&lt;a href=&quot;https://prometheus.io/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prometheus 下载&lt;/a&gt;&lt;br&gt;🍭&lt;a href=&quot;https://prometheus.io/docs/int
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://christinamcqueen.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>CSS 架构</title>
    <link href="https://christinamcqueen.github.io/2017/10/18/CSS%E7%9B%B8%E5%85%B3/%E6%9E%B6%E6%9E%84/"/>
    <id>https://christinamcqueen.github.io/2017/10/18/CSS相关/架构/</id>
    <published>2017-10-18T02:22:40.000Z</published>
    <updated>2018-05-11T02:04:12.266Z</updated>
    
    <content type="html"><![CDATA[<p><strong>良好的 CSS 架构目标</strong></p><ol><li>可预测性：可预见性的 CSS 意味着你的规则行为正如你所想，当你添加或更新一条规则，他不应该影响你网站上不想要受影响的部分。对于一个小型网站很少的修改，并不是很重要。但是对于一个有着几十或几百个页面的大型网站，可预见性的 CSS 就是一种必要。</li><li>可重用：CSS 规范应该是足够抽象的和耦合的，这样你可以根据现有代码部分很快创建出新的组件，而不需要重新编写你已经处理过的样式和问题。</li><li>可维护：当你的网站需要添加、更新或重新安排一些新的组件和特性，这样做不应该重构现有的 CSS。给页面添加 X 组件不应该破坏已经存在的组件 Y。</li><li>可扩展：随着你的网站的规模和复杂程度的增长，它往往需要更多的开发人员来维护。可扩展的 CSS 意味着可以轻松的由有一个人或一个大型的技术团队管理你的网站。他也意味着你的网站的 CSS 架构容易掌握不需要很陡的学习曲线，仅仅因为你是如今唯一接触 CSS 的开发人员，但是并不意味着永远是这种情况。</li></ol><a id="more"></a><hr><p><strong>CSS 分类</strong></p><ol><li>基本样式（Base）： 网站的全局默认样式</li><li>对象（Object）：只关注解构和布局，不被允许修饰类的样式</li><li>组件（Components）：分离的、自成一体的 UI 零件</li><li>状态（Status）：隐藏／显示，展开／收起</li><li>主题（Themes）：只改变一个组件，使用唯一的颜色、字体等</li><li>工具集（Utilities）：应用一个特殊样式规则改变间隙、增加字体大小、居中文本、添加一个浮动清除、隐藏等，对现有组件进行微调</li><li>JavaScript Hook：JavaScript 与 CSS 解耦</li></ol><hr><p><strong>CSS 预处理器</strong><br>预处理器作为工具，可以实现模块化编写 CSS<br>目前流行的预处理器有 Less，Sass，Stylus<br>Less 没有循环，但可以用递归实现，而 Sass 和 Stylus 有真循环<br>无论是工作还是自己写项目，都要搭建一个项目环境，也就是安装一系列的 npm 包。相比刀耕火种的开发方式，使用工具开发的前期准备过程稍显麻烦，然而一旦环境建好，后期的开发将会游刃有余。<br>编写框架大致会用到的 npm 如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">-autoprefixer</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-node-sass</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-npm-run-all</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-rimraf</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-onchange</span></span><br></pre></td></tr></table></figure><hr><p><strong>前端框架对比</strong><br>以 Bootstrap、Semantic、UIkit 为主<br>选择轻量级框架反倒不如自己实现一个框架。因为大多轻量级框架就像是工作总结，是根据自己的业务需求实现的。所以大多不具有通用性。</p><p>大多数的轻量级框架只是 CSS 框架，不涉及 JS 部分，主要用于网页的布局。</p><p>模块划分：编写框架的第一步就是要确定框架应该包含哪些模块。因为是轻量级框架，所以模块肯定没有重量级框架那么全面，只有核心的一些组件。通过比较一些轻量级框架以及工作总结，大致常用的模块包括栅格、媒体、按钮、排版、表单、表格、面板以及辅助工具。<br>在常用的这几个组件中，需要重点关注的是栅格、表单及面板，媒体组件也很重要，但是自由发挥的空间不大，我直接用了 Bootstrap 的媒体组件。</p><p>命名策略：首先是类命名的层次与结构。类命名一直是我比较纠结的地方，刚开始工作的时候为了起一个见名知意又简洁的类名总是抓耳挠腮。我在编写框架时尽量避免与 Bootstrap 的类名重叠，但也不能完全避免。对比其他框架会发现，这种情况不可避免的会出现，毕竟类名会有一定的规律性以及层次性。在这一点上我比较喜欢 Bootstrap 的风格。</p><hr><p><strong>CSS 样式书写规范</strong></p><p>1.&nbsp;规则声明块</p><blockquote><p>当规则声明块中有多个样式声明时，每条样式独占一行。<br>在规则声明块的左大括号 { 前加一个空格。<br>在样式属性的冒号 : 后面加上一个空格，前面不加空格。<br>在每条样式后面都以分号 ; 结尾。<br>规则声明块的右大括号 } 独占一行。<br>每个规则声明间用空行分隔。<br>所有最外层引号使用单引号 ‘ 。<br>当一个属性有多个属性值时，以逗号 , 分隔属性值，每个逗号后添加一个空格，当单个属性值过长时，每个属性值独占一行。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-footer</span>,</span><br><span class="line"><span class="selector-class">.g-header</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-content</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">        <span class="built_in">linear-gradient</span>(135deg, deeppink 25%, transparent 25%) -<span class="number">50px</span> <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(225deg, deeppink 25%, transparent 25%) -<span class="number">50px</span> <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">linear-gradient</span>(315deg, deeppink 25%, transparent 25%),</span><br><span class="line">        <span class="built_in">linear-gradient</span>(45deg, deeppink 25%, transparent 25%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-content</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.&nbsp;样式属性顺序<br>单个样式规则下的属性在书写时，应按功能进行分组，并以 Positioning Model &gt; Box Model &gt; Typographic &gt; Visual 的顺序书写，提高代码的可读性。</p><blockquote><p>如果包含 content 属性，应放在最前面；<br>Positioning Model 布局方式、位置，相关属性包括：position / top / right / bottom / left / z-index / display / float / …<br>Box Model 盒模型，相关属性包括：width / height / padding / margin / border / overflow / …<br>Typographic 文本排版，相关属性包括：font / line-height / text-align / word-wrap / …<br>Visual 视觉外观，相关属性包括：color / background / list-style / transform / animation / transition / …</p></blockquote><p>Positioning 处在第一位，因为他可以使一个元素脱离正常文本流，并且覆盖盒模型相关的样式。盒模型紧跟其后，因为他决定了一个组件的大小和位置。其他属性只在组件内部起作用或者不会对前面两种情况的结果产生影响，所以他们排在后面。</p><p>3.&nbsp;SASS 使用建议<br>1) 使用 SASS 、 LESS 等预处理器时，建议嵌套层级不超过 3 层。<br>2) &nbsp;组件/公用类的使用方法</p><p>组件/公用类使用 %placeholders 定义，使用 @extend 引用。如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%<span class="selector-tag">clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-header</span> &#123;</span><br><span class="line">    @extend %clearfix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) &nbsp;组件类的思考<br>使用 SASS ，经常会预先定义好一些常用公用组件类，譬如清除浮动，水平垂直居中，文字 ellipsis。又或者多个元素具有同样的样式，我们希望能够少写这部分代码，公共部分抽离出来只写一次，达到复用。</p><p>但是复用的方式在 SASS 中有多种，那么是使用单独使用一个类定义，给需要的标签添加，还是使用 @include 或者 @extend在定义的类中引入一个 @mixin，或者一个 @function 呢？</p><p>基于让 CSS 更简洁以及代码的复用考虑，采用上面的使用 %placeholders 定义，使用 @extend 引用的方案。</p><blockquote><p>%placeholders，只是一个占位符，只要不通过 @extend 调用，编译后不会产生任何代码量<br>使用 @extend 引用，则是因为每次调用相同的 %placeholders 时，编译出来相同的 CSS 样式会进行合并（反之，如果使用 @include 调用定义好的 @mixin，编译出来相同的 CSS 样式不会进行合并）<br>这里的组件类特指那些不会动态改变的 CSS 样式，注意与那些可以通过传参生成不同数值样式的 @mixin 方法进行区分</p></blockquote><p>4) 尽量避免使用标签名<br>基于 CSS 选择器的解析规则（从右向左），建议避免使用通用标签名作为选择器的一环可以提高 CSS 匹配性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;良好的 CSS 架构目标&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可预测性：可预见性的 CSS 意味着你的规则行为正如你所想，当你添加或更新一条规则，他不应该影响你网站上不想要受影响的部分。对于一个小型网站很少的修改，并不是很重要。但是对于一个有着几十或几百个页面的大型网站，可预见性的 CSS 就是一种必要。&lt;/li&gt;
&lt;li&gt;可重用：CSS 规范应该是足够抽象的和耦合的，这样你可以根据现有代码部分很快创建出新的组件，而不需要重新编写你已经处理过的样式和问题。&lt;/li&gt;
&lt;li&gt;可维护：当你的网站需要添加、更新或重新安排一些新的组件和特性，这样做不应该重构现有的 CSS。给页面添加 X 组件不应该破坏已经存在的组件 Y。&lt;/li&gt;
&lt;li&gt;可扩展：随着你的网站的规模和复杂程度的增长，它往往需要更多的开发人员来维护。可扩展的 CSS 意味着可以轻松的由有一个人或一个大型的技术团队管理你的网站。他也意味着你的网站的 CSS 架构容易掌握不需要很陡的学习曲线，仅仅因为你是如今唯一接触 CSS 的开发人员，但是并不意味着永远是这种情况。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 基础</title>
    <link href="https://christinamcqueen.github.io/2017/10/08/CSS%E7%9B%B8%E5%85%B3/%E5%9F%BA%E7%A1%80/"/>
    <id>https://christinamcqueen.github.io/2017/10/08/CSS相关/基础/</id>
    <published>2017-10-08T11:42:05.000Z</published>
    <updated>2018-05-11T02:04:12.265Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS 中的继承</strong><br>继承规则：与元素外观（文字颜色，字体等）相关的样式会被继承；与元素布局相关的样式不会看被继承。</p><hr><p><strong>CSS 中的长度</strong><br>1.&nbsp;绝对长度</p><table><thead><tr><th style="text-align:center"><strong>单位标识符</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">in</td><td style="text-align:left">英寸</td></tr><tr><td style="text-align:center">cm</td><td style="text-align:left">厘米</td></tr><tr><td style="text-align:center">mm</td><td style="text-align:left">毫米</td></tr><tr><td style="text-align:center">pt</td><td style="text-align:left">磅</td></tr><tr><td style="text-align:center">pc</td><td style="text-align:left">pica</td></tr></tbody></table><a id="more"></a><p>2.&nbsp;相对长度</p><table><thead><tr><th style="text-align:center"><strong>单位标识符</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">em</td><td style="text-align:left">与元素字号相关</td></tr><tr><td style="text-align:center">ex</td><td style="text-align:left">与元素字体的“x高度”相关</td></tr><tr><td style="text-align:center">rem</td><td style="text-align:left">与根元素的字号相关</td></tr><tr><td style="text-align:center">px</td><td style="text-align:left">CSS 像素</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">另一属性的值的百分比</td></tr></tbody></table><div class="wrap root"><br><span>Default font size(12px)</span><br><span style="font-size: 2em">2em font size</span><br><span style="font-size: 3ex">3ex font size</span><br><span style="font-size: 2rem">2rem font size</span><br></div><p>3.&nbsp;未获广泛支持的 CSS 属性</p><table><thead><tr><th style="text-align:center"><strong>单位标识符</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">gd</td><td style="text-align:left">与网格（grid）相关。它依赖于 CSS 规范中一些定义不太明确的属性，因此未获广泛支持</td></tr><tr><td style="text-align:center">vw</td><td style="text-align:left">与视口（viewport）宽度相关。1vw=文档显示区域宽度的1%</td></tr><tr><td style="text-align:center">vh</td><td style="text-align:left">与视口高度相关。1vh=文档显示区域高度的1%</td></tr><tr><td style="text-align:center">vm</td><td style="text-align:left">1vm=最短视口轴长（高度和宽度中较小的那个）的1%</td></tr><tr><td style="text-align:center">ch</td><td style="text-align:left">与用当前字体显示的字符的平均宽度相关。在 CSS 中定义很潦草，实现也不一致</td></tr></tbody></table><p>4.&nbsp;算式值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"calculate"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.calculate &#123;</span></span><br><span class="line"><span class="undefined">    width: calc(80%-20px);</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">    background: grey;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- <div class="wrap" style="padding: 10px 0;"><div class="calculate"></div></div> --><p>⚠️<strong>注意：仅 IE 支持 calc 属性</strong></p><p>5.&nbsp;其他单位</p><table><thead><tr><th style="text-align:center"><strong>单位标识符</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">deg</td><td style="text-align:left">度（取值范围：0deg~360deg）</td></tr><tr><td style="text-align:center">grad</td><td style="text-align:left">百分度（取值范围：0grad~400grad）</td></tr><tr><td style="text-align:center">rad</td><td style="text-align:left">弧度（取值范围：0rad~6.28rad）</td></tr><tr><td style="text-align:center">turn</td><td style="text-align:left">圆周（1turn=360deg）</td></tr></tbody></table><hr><p><strong>浏览器特定厂商前缀</strong></p><table><thead><tr><th style="text-align:center"><strong>浏览器</strong></th><th style="text-align:left"><strong>前缀</strong></th></tr></thead><tbody><tr><td style="text-align:center">Chrome、Safari</td><td style="text-align:left">-webkit-</td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:left">-o-</td></tr><tr><td style="text-align:center">Firefox</td><td style="text-align:left">-moz-</td></tr><tr><td style="text-align:center">Internet Explore</td><td style="text-align:left">-ms-</td></tr></tbody></table><hr><p><strong>盒模型</strong></p><div class="box-wrap"><span>外边距(margin)</span><div class="box-wrap wrap-border"><span class="border-text">边框(border)</span><span>内边距(padding)</span><div class="box-wrap wrap-content">元素内容(content)</div></div></div><hr><p><strong>盒模型与 box-sizing</strong></p><blockquote><p><strong>box-sizing: content-box(默认) | padding-box(已从规范中移除) | border-box | inherit</strong></p></blockquote><p><strong>1.&nbsp;content-box(默认)：</strong>默认情况下，元素实际宽度、高度为元素 <code>width</code> 和 <code>height</code> 属性设置宽度和高度加上 <code>padding</code>、<code>border</code> 和 <code>margin</code> 的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.content-box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin: 20px auto;</span></span><br><span class="line"><span class="undefined">    background: #e5e5e5;</span></span><br><span class="line"><span class="undefined">    box-sizing: content-box;</span></span><br><span class="line"><span class="undefined">    border: 10px solid #000;</span></span><br><span class="line"><span class="undefined">    padding: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><div class="content-box"></div></div><p>元素的指定宽度和高度不包括 <code>padding</code>、<code>border</code> 和 <code>margin</code>。</p><blockquote><p>不同浏览器对宽度的诠释不一样。符合 W3C 标准的浏览器认为一个元素的宽度只等于其 content 的宽度，其余都要额外算。<br><strong>一般浏览器下元素最终宽度为：</strong><code>宽度 = width + padding(*2) + border(*2) + margin(*2);</code><br><strong>IE（低于IE9）下，最终宽度为：</strong><code>宽度 = width + margin(*2);</code></p></blockquote><p><strong>2.&nbsp;border-box：</strong>元素实际宽度、高度为元素 <code>width</code> 和 <code>height</code> 属性设置宽度和高度值， <code>padding</code> 和 <code>border</code> 属性在指定的宽度和高度内进行布局和绘制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.border-box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin: 20px auto;</span></span><br><span class="line"><span class="undefined">    background: #e5e5e5;</span></span><br><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    border: 10px solid #000;</span></span><br><span class="line"><span class="undefined">    padding: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><div class="border-box"></div></div><p>元素实际尺寸为 100px * 100px，元素的指定宽度和高度包括 <code>padding</code> 和 <code>border</code>。</p><p><strong>3.&nbsp;inhert：</strong>元素 <code>box-sizing</code> 属性继承自父元素。</p><style type="text/css">.root {    font-size: 12px;}.calculate {    width: calc(80%-20px);    height: 20px;    background: grey;}.box-wrap {    text-align: center;    position: relative;    margin: 15px;    padding: 15px;    max-width: 240px;    border: 2px dashed #e5e5e5;}.wrap-border {    border: 2px solid #000;    background: #f5f5f5;}.wrap-content {    background: #fff;}.border-text {    border: 1px solid #000;    background: #fff;    padding: 2px 6px;    position: absolute;    top: -12px;    line-height: 1;}.content-box {    width: 100px;    height: 100px;    margin: 20px auto;    background: #e5e5e5;    box-sizing: content-box;    border: 10px solid #000;    padding: 10px;}.border-box {    width: 100px;    height: 100px;    margin: 20px auto;    background: #e5e5e5;    box-sizing: border-box;    border: 10px solid #000;    padding: 10px;}.title {    color: transparent;    background-color: #000;    text-shadow: rgba(255,255,255,0.5) -3px -1px 6px, rgba(255,255,255,0.2) 0 3px 1px;    -webkit-background-clip: text;}</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CSS 中的继承&lt;/strong&gt;&lt;br&gt;继承规则：与元素外观（文字颜色，字体等）相关的样式会被继承；与元素布局相关的样式不会看被继承。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;CSS 中的长度&lt;/strong&gt;&lt;br&gt;1.&amp;nbsp;绝对长度&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;单位标识符&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;in&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;英寸&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cm&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;厘米&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;mm&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;毫米&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;pt&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;磅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;pc&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pica&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://christinamcqueen.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-页面元素</title>
    <link href="https://christinamcqueen.github.io/2017/10/08/HTML5/%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/"/>
    <id>https://christinamcqueen.github.io/2017/10/08/HTML5/页面元素/</id>
    <published>2017-10-08T09:07:30.000Z</published>
    <updated>2018-05-11T02:04:12.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>组织内容</strong></p><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">表示段落</td><td style="text-align:left">p</td></tr><tr><td style="text-align:center">将全局属性应用到一片内容上，但不表示任何其他内容分组</td><td style="text-align:left">div</td></tr><tr><td style="text-align:center">保留 HMTL 文档中的布局</td><td style="text-align:left">pre</td></tr><tr><td style="text-align:center">表示引自他处的内容</td><td style="text-align:left">blockquote</td></tr><tr><td style="text-align:center">表示因段落级别的主题转变</td><td style="text-align:left">hr</td></tr><tr><td style="text-align:center">生成有序列表</td><td style="text-align:left">ol、li</td></tr><tr><td style="text-align:center">生成无序列表</td><td style="text-align:left">ul、li</td></tr><tr><td style="text-align:center">生成项目编号不连续的有序列表</td><td style="text-align:left">ol、li，并设置 li 元素的 value 属性</td></tr><tr><td style="text-align:center">生成术语及其定义的列表</td><td style="text-align:left">dl、dt、dd</td></tr><tr><td style="text-align:center">生成带自定义项目编号的列表</td><td style="text-align:left">ul，配合使用 CSS 的 <code>:before</code> 选择器和 <code>counter特性</code></td></tr><tr><td style="text-align:center">表示插图</td><td style="text-align:left">figure、figucaption</td></tr></tbody></table><a id="more"></a><hr><p><strong>文档分节</strong></p><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">表示标题</td><td style="text-align:left">h1~h3</td></tr><tr><td style="text-align:center">表示一组标题，其中只有第一个可出现在文档大纲中</td><td style="text-align:left">hgroup</td></tr><tr><td style="text-align:center">表示一个重要的主题或概念</td><td style="text-align:left">section</td></tr><tr><td style="text-align:center">表示首部和尾部</td><td style="text-align:left">header、footer</td></tr><tr><td style="text-align:center">表示导航元素集合</td><td style="text-align:left">nav</td></tr><tr><td style="text-align:center">表示可以独立发布的重要主题或概念</td><td style="text-align:left">article</td></tr><tr><td style="text-align:center">表示周边内容的一些沾边话题</td><td style="text-align:left">aside</td></tr><tr><td style="text-align:center">表示文档或文章的联系信息</td><td style="text-align:left">address</td></tr><tr><td style="text-align:center">生成一个区域，用户可将其展开以了解更多细节</td><td style="text-align:left">details、sumary</td></tr></tbody></table><hr><p><strong>表格元素</strong></p><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">生成基本的表格</td><td style="text-align:left">table、tr、td</td></tr><tr><td style="text-align:center">为表格添加表头单元格</td><td style="text-align:left">th</td></tr><tr><td style="text-align:center">区分行表头和列表头</td><td style="text-align:left">thead、tbody</td></tr><tr><td style="text-align:center">为表格添加表脚</td><td style="text-align:left">tfoot</td></tr><tr><td style="text-align:center">生成不规则表格单元格</td><td style="text-align:left">th、td 定义的 colspan、rowspan</td></tr><tr><td style="text-align:center">将单元格与表头相关联一满足残障辅助技术的需要</td><td style="text-align:left">th、td 定义的 headers 属性</td></tr><tr><td style="text-align:center">为表格添加标题</td><td style="text-align:left">caption</td></tr><tr><td style="text-align:center">为表格按列处理</td><td style="text-align:left">colgroup、col</td></tr><tr><td style="text-align:center">表示表格不是用来控制页面布局的</td><td style="text-align:left">table 元素定义的 border 属性</td></tr></tbody></table><hr><p><strong>表单</strong></p><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">制作基本的表单</td><td style="text-align:left">form、input、button</td></tr><tr><td style="text-align:center">指定表单数据发送到的 URL</td><td style="text-align:left">form 元素的 action 属性（或者 button 元素的 formaction 属性）</td></tr><tr><td style="text-align:center">指定传送给服务器的表单数据采用的编码方式</td><td style="text-align:left">form 元素的 entype 属性（或者 button 元素的 formenctype 属性）</td></tr><tr><td style="text-align:center">控制自动完成功能</td><td style="text-align:left">form 元素或 input 元素的 autocomplete 属性</td></tr><tr><td style="text-align:center">为服务器的反馈信息指定显示位置</td><td style="text-align:left">form 元素的 target 属性（或者 button 元素的 formtarget 属性）</td></tr><tr><td style="text-align:center">指定表单的名字</td><td style="text-align:left">form 元素的 name 属性</td></tr><tr><td style="text-align:center">为 input 元素添加数名标签</td><td style="text-align:left">label</td></tr><tr><td style="text-align:center">载入表单后自动聚焦于某个 input 元素</td><td style="text-align:left">input 元素的 autofocus 属性</td></tr><tr><td style="text-align:center">禁用单个 input 元素</td><td style="text-align:left">input 元素的 disabled 属性</td></tr><tr><td style="text-align:center">对 input 元素编组</td><td style="text-align:left">fieldset</td></tr><tr><td style="text-align:center">为 fieldset 元素添加说明标签</td><td style="text-align:left">legend</td></tr><tr><td style="text-align:center">禁用一组 input 元素</td><td style="text-align:left">fieldset 元素的 disabled 属性</td></tr><tr><td style="text-align:center">用 button 元素提交表单</td><td style="text-align:left">button 元素的 type 属性设置为 submit</td></tr><tr><td style="text-align:center">用 button 元素重置表单</td><td style="text-align:left">button 元素的 type 属性设置为 reset</td></tr><tr><td style="text-align:center">用 button 元素表示一般的按钮控件</td><td style="text-align:left">button 元素的 type 属性设置为 button</td></tr><tr><td style="text-align:center">将表单相关的元素与并非其祖先元素的 form 元素挂钩</td><td style="text-align:left">使用 form 属性</td></tr></tbody></table><hr><p><strong>定制 input 元素</strong></p><div class="wrap"><label class="input-wrap" for"password"="" style="width: 100%; text-align: left;"><legend>Password: </legend><input type="password" placeholder="Min 6 characters" id="password" name="password"></label></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>"<span class="attr">password</span>"&gt;</span></span><br><span class="line">        password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Min 6 characters"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">lebel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用属性</strong></th></tr></thead><tbody><tr><td style="text-align:center">设置 input 元素的大小和容量</td><td style="text-align:left">size、maxlength</td></tr><tr><td style="text-align:center">为 input 元素设置初始值或关于所需数据类型的提示</td><td style="text-align:left">value、placeholder</td></tr><tr><td style="text-align:center">提供一批建议值供用户选择</td><td style="text-align:left">list、datalist</td></tr><tr><td style="text-align:center">生成只读或被禁用的 input 元素</td><td style="text-align:left">readonly、disabled</td></tr><tr><td style="text-align:center">隐藏用户输入的字符</td><td style="text-align:left">password 型 input 元素</td></tr><tr><td style="text-align:center">用 input 元素生成按钮</td><td style="text-align:left">submit、reset 或 button 型 input 元素</td></tr><tr><td style="text-align:center">将输入内容限制为数值</td><td style="text-align:left">number 型 input 元素</td></tr><tr><td style="text-align:center">将输入内容限制在一个数值范围</td><td style="text-align:left">range 型 input 元素</td></tr><tr><td style="text-align:center">限制用户只能选择是或否</td><td style="text-align:left">checkbox 型 input 元素</td></tr><tr><td style="text-align:center">限制用户在有限几个选项中进行选择</td><td style="text-align:left">radio 型 input 元素</td></tr><tr><td style="text-align:center">将输入内容限制为特定格式的字符串</td><td style="text-align:left">email、tel 或 url 型 input 元素</td></tr><tr><td style="text-align:center">将输入内容限制为时间或日期</td><td style="text-align:left">datetime、datetime-local、date、month、time 或 week 型 input 元素</td></tr><tr><td style="text-align:center">让用户选择一种颜色</td><td style="text-align:left">color 型 input 元素</td></tr><tr><td style="text-align:center">让用户输入一个搜索词</td><td style="text-align:left">search 型 input 元素</td></tr></tbody></table><hr><p><strong>其他表单元素</strong></p><form onsubmit="return false" oninput="res.value=quant.valueAsNumber*price.valueAsNumber"><fieldset><legend>Price Calculator</legend><input type="number" placeholder="Quanrity" id="quant" name="quant"> * <input type="number" placeholder="Price" id="price" name="price"> = <output for="quan name" name="res"></output></fieldset></form><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false"</span> <span class="attr">oninput</span>=<span class="string">"res.value=quant.valueAsNumber * price.valueAsNumber"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Price Calculator<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">placeholder</span>=<span class="string">"Quanrity"</span> <span class="attr">id</span>=<span class="string">"quant"</span> <span class="attr">name</span>=<span class="string">"quant"</span>/&gt;</span> *</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">placeholder</span>=<span class="string">"Price"</span> <span class="attr">id</span>=<span class="string">"price"</span> <span class="attr">name</span>=<span class="string">"price"</span>/&gt;</span> =</span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">for</span>=<span class="string">"quan name"</span> <span class="attr">name</span>=<span class="string">"res"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fidldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">生成一系列选项供用户选择</td><td style="text-align:left">select</td></tr><tr><td style="text-align:center">对 select 元素中的选项编组</td><td style="text-align:left">optgroup</td></tr><tr><td style="text-align:center">获取用户输入的多行文字</td><td style="text-align:left">textarea</td></tr><tr><td style="text-align:center">表示计算结果</td><td style="text-align:left">output</td></tr><tr><td style="text-align:center">生成公开／私有密钥对</td><td style="text-align:left">keygen</td></tr><tr><td style="text-align:center">确保用户为表单元素提供了一个值</td><td style="text-align:left">required 属性</td></tr><tr><td style="text-align:center">确保输入值处于一个范围内</td><td style="text-align:left">min、max 属性</td></tr><tr><td style="text-align:center">确保输入值匹配一个正则表达式</td><td style="text-align:left">pattern 属性</td></tr><tr><td style="text-align:center">禁用输入验证</td><td style="text-align:left">novalidate 或 formnovalidate 属性</td></tr></tbody></table><hr><p><strong>嵌入内容</strong></p><table><thead><tr><th style="text-align:center"><strong>问题</strong></th><th style="text-align:left"><strong>使用元素</strong></th></tr></thead><tbody><tr><td style="text-align:center">在 HTML 文档里潜入图像</td><td style="text-align:left">img 或 object</td></tr><tr><td style="text-align:center">创建基于图像的超链接</td><td style="text-align:left">在 a 元素李使用 img 元素</td></tr><tr><td style="text-align:center">创建客户端分区响应图</td><td style="text-align:left">将 img 元素或 object 元素与map 和 area 元素结合使用</td></tr><tr><td style="text-align:center">嵌入另一张 HTML 文档</td><td style="text-align:left">iframe</td></tr><tr><td style="text-align:center">通过插件嵌入内容</td><td style="text-align:left">embed 或 object</td></tr><tr><td style="text-align:center">创建浏览上下文</td><td style="text-align:left">object，用它的name属性定义浏览上下文的名称</td></tr><tr><td style="text-align:center">不通过插件嵌入音频和视频</td><td style="text-align:left">audio、video、source、track</td></tr><tr><td style="text-align:center">在 HTML 文档里嵌入图形</td><td style="text-align:left">canvas</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;组织内容&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;strong&gt;使用元素&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表示段落&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将全局属性应用到一片内容上，但不表示任何其他内容分组&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;div&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;保留 HMTL 文档中的布局&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pre&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表示引自他处的内容&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;blockquote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表示因段落级别的主题转变&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;hr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;生成有序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ol、li&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;生成无序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ul、li&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;生成项目编号不连续的有序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ol、li，并设置 li 元素的 value 属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;生成术语及其定义的列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dl、dt、dd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;生成带自定义项目编号的列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ul，配合使用 CSS 的 &lt;code&gt;:before&lt;/code&gt; 选择器和 &lt;code&gt;counter特性&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;表示插图&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;figure、figucaption&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="https://christinamcqueen.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>元数据元素</title>
    <link href="https://christinamcqueen.github.io/2017/10/05/HTML5/%E5%85%83%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/"/>
    <id>https://christinamcqueen.github.io/2017/10/05/HTML5/元数据元素/</id>
    <published>2017-10-05T05:28:18.000Z</published>
    <updated>2018-05-11T02:04:12.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文档标题</strong><br>title 元素设置文档标题或名称。</p><hr><p><strong>相对 URL 解析基准</strong><br>base 元素设置一个基准的 UTL，让 HTML 文档中的相对连接再次基础上进行解析。相对链接省略 URL 中的协议、主机和端口号，需要根据别的 URL 得出其完整形式。<br>局部属性：href、target。</p><hr><p><strong>用元数据说明文档</strong><br>meta 元素可以用来定义文档的各种数据，一个 HTML 文档中可以包含多个 meta 元素。<br>局部属性：name、content、charset、http-quiv</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 指定名／值元数据对</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Christina McQueen"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>供 meta 元素使用的与定义元数据类型</strong></p><table><thead><tr><th style="text-align:center"><strong>元数据名称</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">application name</td><td style="text-align:left">当前页所属 web 应用系统的名称</td></tr><tr><td style="text-align:center">author</td><td style="text-align:left">当前页的作者名</td></tr><tr><td style="text-align:center">description</td><td style="text-align:left">当前页的说明</td></tr><tr><td style="text-align:center">generator</td><td style="text-align:left">用来生成 HMTL 的软件名称</td></tr><tr><td style="text-align:center">keywords</td><td style="text-align:left">一批以逗号分隔的字符串，用来描述页面的内容</td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 声明字符编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"urf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 模拟 HTTP 标头字段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5;https://christinamcqueen.github.io"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>http-equiv 属性允许使用的值</strong></p><table><thead><tr><th style="text-align:center"><strong>属性值</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">refresh</td><td style="text-align:left">以秒为单位指定一个时间间隔，在此时间过去之后将从服务器重新载入当前页面，也可指定一个 URL 让浏览器载入</td></tr><tr><td style="text-align:center">default-style</td><td style="text-align:left">指定页面优先使用的样式表。对应的 content 属性值应与同一文档中某个 style 元素或 link 元素的 title 属性值相同</td></tr><tr><td style="text-align:center">content-type</td><td style="text-align:left">另一种声明 HTML 页面所用字符编码的方法。eg：<code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;</code></td></tr></tbody></table><hr><p><strong>定义 CSS 样式</strong></p><ol><li><p>指定样式类型：type 属性用来指定样式类型，属性值为 <code>text/css</code>。</p></li><li><p>指定样式作用范围：<code>scoped</code> 属性若存在于 style 元素中，则其中定义的样式值作用于该元素的父元素及其所有兄弟元素。反之则作用于整个 HTML 文档。</p></li><li><p>指定样式使用的媒体</p></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1) 使用 style 元素的 media 属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><center>供 style 元素属性用的规定设备值</center><table><thead><tr><th style="text-align:center"><strong>设备</strong></th><th style="text-align:left"><strong>适用设备</strong></th></tr></thead><tbody><tr><td style="text-align:center">all</td><td style="text-align:left">所有设备（默认值）</td></tr><tr><td style="text-align:center">aural</td><td style="text-align:left">语音合成器</td></tr><tr><td style="text-align:center">braille</td><td style="text-align:left">盲文设备</td></tr><tr><td style="text-align:center">handheld</td><td style="text-align:left">手持设备</td></tr><tr><td style="text-align:center">projection</td><td style="text-align:left">投影机</td></tr><tr><td style="text-align:center">print</td><td style="text-align:left">打印预览和打印页面</td></tr><tr><td style="text-align:center">screen</td><td style="text-align:left">计算机显示器屏幕</td></tr><tr><td style="text-align:center">tty</td><td style="text-align:left">电传打字机等等宽设备</td></tr><tr><td style="text-align:center">tv</td><td style="text-align:left">电视机</td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) 使 style 元素的对象更加具体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen AND (max-width: 500px)"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><center>供 style 元素的 media 属性使用的特性</center><table><thead><tr><th style="text-align:center"><strong>特性</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">width height</td><td style="text-align:left">浏览器宽度和高度。单位：px</td><td style="text-align:left">width: 200px</td></tr><tr><td style="text-align:center">device-width device-height</td><td style="text-align:left">整个设备的宽度和高度（不仅仅识浏览器窗口）</td><td style="text-align:left">min-device-width: 200px</td></tr><tr><td style="text-align:center">resolution</td><td style="text-align:left">设备的像素密度。单位：dpi/dpcm</td><td style="text-align:left">max-resolution: 600dpi</td></tr><tr><td style="text-align:center">orientation</td><td style="text-align:left">设备较长边炒香。支持的值：portrait/landscape</td><td style="text-align:left">orientation:landscape</td></tr><tr><td style="text-align:center">aspect-ratio device-aspect-ratio</td><td style="text-align:left">浏览器窗口或设备的像素宽高比</td><td style="text-align:left">min-aspect-ratio: 16/9</td></tr><tr><td style="text-align:center">color monochrome</td><td style="text-align:left">彩色或黑白设备上每个像素占用的二进制位数</td><td style="text-align:left">min-monochrome: 2</td></tr><tr><td style="text-align:center">color-index</td><td style="text-align:left">设备所能现实的颜色数目</td><td style="text-align:left">max-color-index: 256</td></tr><tr><td style="text-align:center">scan</td><td style="text-align:left">电视的扫描模式。支持的值：progressive/interlace</td><td style="text-align:left">scan: interlace</td></tr><tr><td style="text-align:center">grid</td><td style="text-align:left">设备的类型。网格型设备使用固定网格显示内容</td><td style="text-align:left">grid: 0</td></tr></tbody></table><hr><p><strong>使用脚本元素</strong></p><p>1.&nbsp;script 元素</p><center>script 元素的局部属性</center><table><thead><tr><th style="text-align:center"><strong>属性</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">type</td><td style="text-align:left">所引用或定义的脚本的类型，对于 JavaScript 简本这个属性可以省略</td></tr><tr><td style="text-align:center">src</td><td style="text-align:left">指定外部脚本文件的 URL</td></tr><tr><td style="text-align:center">defer async</td><td style="text-align:left">设定脚本的执行方式</td></tr><tr><td style="text-align:center">charset</td><td style="text-align:left">外部脚本所用的字符编码，该属性只能与 src 属性一同使用</td></tr></tbody></table><blockquote><p>defer: 所有元素解析后加载脚本文件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"path to file"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>async: 浏览器在继续解析 HTML 文档中其他元素的同时异步加载和执行脚本。</p></blockquote><p>2.&nbsp;noscript 元素</p><p>适用于禁止启用 JavaScript 的场景。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"path to file"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">npscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>You can't use this page without JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">npscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;文档标题&lt;/strong&gt;&lt;br&gt;title 元素设置文档标题或名称。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;相对 URL 解析基准&lt;/strong&gt;&lt;br&gt;base 元素设置一个基准的 UTL，让 HTML 文档中的相对连接再次基础上进行解析。相对链接省略 URL 中的协议、主机和端口号，需要根据别的 URL 得出其完整形式。&lt;br&gt;局部属性：href、target。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;用元数据说明文档&lt;/strong&gt;&lt;br&gt;meta 元素可以用来定义文档的各种数据，一个 HTML 文档中可以包含多个 meta 元素。&lt;br&gt;局部属性：name、content、charset、http-quiv&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. 指定名／值元数据对&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Christina McQueen&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="https://christinamcqueen.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 全局属性</title>
    <link href="https://christinamcqueen.github.io/2017/10/03/HTML5/HTML5-%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/"/>
    <id>https://christinamcqueen.github.io/2017/10/03/HTML5/HTML5-全局属性/</id>
    <published>2017-10-03T09:37:42.000Z</published>
    <updated>2018-05-11T02:04:12.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>accesskey 属性</strong><br>accesskey 属性可以设定一个或几个用来选择页面上元素的快捷键。用来触发 accesskey 机制的按钮组和因平台而异。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">access</span>=<span class="string">"n"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"passsord"</span> <span class="attr">name</span>=<span class="string">"passsord"</span> <span class="attr">access</span>=<span class="string">"p"</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><label class="input-wrap"><legend>Name:</legend><input type="text" name="name" access="n"></label><label class="input-wrap mt10"><legend>Password:</legend><input type="passsord" name="passsord" access="p"></label></div><hr><p><strong>class 属性</strong><br>用于将元素归类。</p><a id="more"></a><hr><p><strong>contenteditable 属性</strong><br>contenteditable 属性是 HTML5 新增加的属性，用于让用户能够修改页面上的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span>This line is editable<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><p contenteditable="true">This line is editable</p></div><hr><p><strong>contextmenu 属性</strong><br>用来为元素设定快捷菜单。这种菜单在受到出发的时候弹出来。</p><hr><p><strong>dir 属性</strong><br>用来规定元素中文字的方向。具有两个属性： ltr （从左到右的文字）和 rtl （从右到左的文字）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>This is left to right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span>This is right to left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><p dir="ltr">This is left to right</p><p dir="rtl">This is right to left</p></div><hr><p><strong>draggable 属性</strong><br>HTML5 支持拖放操作的方式之一，用来表示元素是否可被拖放。</p><hr><p><strong>dropzone 属性</strong><br>HTML5 支持拖放操作的方式之一，与上述 draggable 属性搭配使用。</p><hr><p><strong>hidden 属性</strong><br>表示隐藏元素。</p><hr><p><strong>id 属性</strong><br>用来给元素分配唯一的标识符。</p><hr><p><strong>lang 属性</strong><br>用于说明元素内容使用的语言。</p><hr><p><strong>spellcheck 属性</strong><br>表明浏览器是否应该对元素内容进行拼写检查。</p><hr><p><strong>style 属性</strong><br>直接在元素上定义 CSS 样式。</p><hr><p><strong>tabindex 属性</strong><br>HTML 页面上的键盘焦点可以通过 Tab 键在各元素间切换。用 tabindex 属性可以改变默认转义顺序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">tabindex</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">tabindex</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Phone:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">tabindex</span>=<span class="string">"2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><label class="input-wrap"><legend>Name:</legend><input type="text" tabindex="1"></label><label class="input-wrap mt10"><legend>Email:</legend><input type="text" tabindex="3"></label><label class="input-wrap mt10"><legend>Phone:</legend><input type="text" tabindex="2"></label></div><hr><p><strong>title 属性</strong><br>提供元素额外信息。浏览器通常用浙西东西显示工具提示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"To ChristinaMcQueen's blog"</span> <span class="attr">href</span>=<span class="string">"https://github.com/ChristinaMcQueen"</span>&gt;</span>To ChristinaMcQueen's blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="wrap"><a title="To ChristinaMcQueen's blog" href="https://github.com/ChristinaMcQueen" target="_blank" rel="noopener">To ChristinaMcQueen’s blog</a></div><style type="text/css">.wrap p {    margin: 10px 0;}</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;accesskey 属性&lt;/strong&gt;&lt;br&gt;accesskey 属性可以设定一个或几个用来选择页面上元素的快捷键。用来触发 accesskey 机制的按钮组和因平台而异。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;Name:&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;access&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;Password:&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;passsord&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;passsord&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;access&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;div class=&quot;wrap&quot;&gt;&lt;label class=&quot;input-wrap&quot;&gt;&lt;legend&gt;Name:&lt;/legend&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; access=&quot;n&quot;&gt;&lt;/label&gt;&lt;label class=&quot;input-wrap mt10&quot;&gt;&lt;legend&gt;Password:&lt;/legend&gt;&lt;input type=&quot;passsord&quot; name=&quot;passsord&quot; access=&quot;p&quot;&gt;&lt;/label&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;class 属性&lt;/strong&gt;&lt;br&gt;用于将元素归类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="https://christinamcqueen.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式合集</title>
    <link href="https://christinamcqueen.github.io/2017/10/01/Tool/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86/"/>
    <id>https://christinamcqueen.github.io/2017/10/01/Tool/常用正则表达式合集/</id>
    <published>2017-10-01T07:15:52.000Z</published>
    <updated>2018-05-11T02:04:12.215Z</updated>
    
    <content type="html"><![CDATA[<div class="wrap"><textarea class="full-width" id="inputTxt" name="text" type="text" placeholder="请输入匹配文本"></textarea><div class="reg-layout"><input class="reg-item" id="regTxt" name="reg" type="text" placeholder="请输入正则表达式"><label class="reg-item ml10"><input class="mr4" name="global" type="checkbox"><legend>全局搜索</legend></label><label class="reg-item ml10"><input class="mr4" name="capital" type="checkbox"><legend>忽略大小写</legend></label><button class="ml10 beautiful-anim-center beautiful-anim" id="testBtn">测试匹配</button></div><textarea id="result" class="full-width mt10" disabled></textarea></div><h1 id="数字校验"><a href="#数字校验" class="headerlink" title="数字校验"></a>数字校验</h1><ol><li>数字：<code>^[0-9]*$</code></li><li>n 位的数字：<code>^\d{n}$</code></li><li>至少 n 位的数字：<code>^\d{n,}$</code></li><li>m-n 位的数字：<code>^\d{m,n}$</code></li><li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li><li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></li><li>带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></li><li>正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></li><li>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></li><li>有1-3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></li><li>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^+?[1-9][0-9]*$</code></li><li>非零的负整数：<code>^-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]\d*$</code></li><li>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></li><li>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></li><li>非负浮点数：<code>^\d+(.\d+)?$</code> 或 <code>^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</code></li><li>非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$</code> 或 <code>^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</code></li><li>正浮点数：<code>^[1-9]\d*.\d*|0.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li><li>负浮点数：<code>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></li><li>浮点数：<code>^(-?\d+)(.\d+)?$</code> 或 <code>^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</code></li></ol><h1 id="字符校验"><a href="#字符校验" class="headerlink" title="字符校验"></a>字符校验</h1><ol><li>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></li><li>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></li><li>长度为3-20的所有字符：<code>^.{3,20}$</code></li><li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li><li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li><li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li><li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li><li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code> 或 <code>^\w{3,20}$</code></li><li>中文、英文、数字包括下划线：<code>^[\u4e00-\u9fa5A-Za-z0-9_]+$</code></li><li>中文、英文、数字但不包括下划线等符号：<code>^[\u4e00-\u9fa5A-Za-z0-9]+$</code> 或 <code>^[\u4e00-\u9fa5A-Za-z0-9]{2,20}$</code></li><li>可以输入含有 <code>^%&amp;&#39;,;=?$&quot;</code> 等字符：<code>[^%&amp;&#39;,;=?$&quot;]+</code></li><li>禁止输入含有 <code>~</code> 的字符：<code>[^~&quot;]+</code></li></ol><h1 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h1><ol><li>Email 地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</code></li><li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li><li>InternetURL：<code>[a-zA-z]+://[^\s]*</code> 或 <code>^http://([\w-]+.)+[\w-]+(/[w-./?%&amp;=]*)?$</code></li><li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></li><li>电话号码（”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX）：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li><li>国内电话号码（0511-4405222、021-87888822）：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li><li>身份证号（15位、18位数字）：<code>^\d{15}|\d{18}$</code></li><li>短身份证号码（数字、字母x结尾）：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></li><li>帐号是否合法（字母开头，允许5-16字节，允许字母数字下划线）：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li><li>密码（以字母开头，长度在6~18之间，只能包含字母、数字和下划线）：<code>^[a-zA-Z]\w{5,17}$</code></li><li>强密码（必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间）：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></li><li>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></li><li>一年的12个月（01～09和1～12）：<code>^(0?[1-9]|1[0-2])$</code></li><li>一个月的31天（01～09和1～31）：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li><li>钱的输入格式：<ul><li>有四种钱的表示形式我们可以接受：“10000.00”和“10,000.00”，和没有“分”的“10000”和“10,000”：<code>^[1-9][0-9]*$</code></li><li>这表示任意一个不以0开头的数字，但是，这也意味着一个字符“0”不通过，所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li><li>一个0或者一个不以0开头的数字。我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li><li>这表示一个0或者一个可能为负的开头不为0的数字。让用户以0开头好了。把负号的也去掉，因为钱总不能是负的吧，下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li><li>必须说明的是，小数点后面至少应该有1位数，所以“10.”是不通过的，但是“10”和“10.2”是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li><li>这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></li><li>这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code> 1到3个数字，后面跟着任意个 逗号+3</li></ul></li><li>xml 文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></li><li>双字节字符：<code>[^\x00-\xff]</code>  （包括汉字在内，可以用来计算字符串的长度（一个双字节字符长度计2，ASCII 字符计1））</li><li>空白行的正则表达式：<code>\s*</code>  （可以用来删除空白行）</li><li>HTML 标记的正则表达式：<code>&lt;(S*?)[^&gt;]*&gt;.*?&lt;/script&gt;|&lt;.*? /&gt;</code>  （网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力）</li><li>首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code>  （可以用来删除行首行尾的空白字符（包括空格、制表符、换页符等等），非常有用的表达式）</li><li>腾讯 QQ 号：<code>[1-9][0-9]{4,}</code>  （腾讯 QQ 号从10000开始）</li><li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code>  （中国邮政编码为6位数字）</li><li>IP 地址：<code>\d+.\d+.\d+.\d+</code>  （提取 IP 地址时有用）</li><li>IP 地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></li></ol><script>const testBtn = document.getElementById("testBtn");testBtn.onclick = function(e) {    const inputTxt = document.getElementById("inputTxt").value;    const regTxt = document.getElementById("regTxt").value;    const resultElem = document.getElementById("result");    const isGlobal = document.getElementsByName("global")[0].checked;    const isCapital = document.getElementsByName("capital")[0].checked;    const opt = (isGlobal ? 'g' : '') + (isCapital ? 'i' : '');    const regExp = new RegExp(regTxt, opt);    const execResult = regExp.exec(inputTxt);    resultElem.innerHTML = execResult ? '匹配结果：' + execResult[0] + '\n匹配位置：' + execResult.index : '没有匹配';}</script><style>.reg-layout {    display: flex;    align-items: center;    margin-top: 10px;}.reg-item {    min-width: 100px;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;wrap&quot;&gt;&lt;textarea class=&quot;full-width&quot; id=&quot;inputTxt&quot; name=&quot;text&quot; type=&quot;text&quot; placeholder=&quot;请输入匹配文本&quot;&gt;&lt;/textarea&gt;&lt;div class=&quot;reg-layout
      
    
    </summary>
    
    
      <category term="正则" scheme="https://christinamcqueen.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>离线缓存 AppCache</title>
    <link href="https://christinamcqueen.github.io/2017/08/16/%E7%BC%93%E5%AD%98/%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98-AppCache/"/>
    <id>https://christinamcqueen.github.io/2017/08/16/缓存/离线缓存-AppCache/</id>
    <published>2017-08-16T06:20:43.000Z</published>
    <updated>2018-05-11T02:04:12.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是应用程序缓存（Application-Cache）"><a href="#什么是应用程序缓存（Application-Cache）" class="headerlink" title="什么是应用程序缓存（Application Cache）?"></a>什么是应用程序缓存（Application Cache）?</h1><p>HTML5 提供一种应用程序缓存机制，使得基于web的应用程序可以离线运行。开发者可以使用 Application Cache (AppCache) 接口设定浏览器应该缓存的资源并使得离线用户可用。 在处于离线状态时，即使用户点击刷新按钮，应用也能正常加载与工作。</p><p><strong>优势</strong></p><ul><li>离线浏览: 用户可以在离线状态下浏览网站内容。</li><li>更快的速度: 因为数据被存储在本地，所以速度会更快。</li><li>减轻服务器的负载: 浏览器只会下载在服务器上发生改变的资源。</li></ul><a id="more"></a><hr><h1 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h1><p>所有主流浏览器均支持应用程序缓存，除了 Internet Explorer。</p><hr><h1 id="启用应用程序缓存"><a href="#启用应用程序缓存" class="headerlink" title="启用应用程序缓存"></a>启用应用程序缓存</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"example.appcache"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，若想为应用启用应用缓存，需要在应用页面中的 <html> 元素上增加 manifest 特性<br><strong>manifest 文件需要配置正确的 <code>MIME-type</code>，即 <code>text/cache-manifest</code>。必须在 web 服务器上进行配置。</strong></html></p><hr><h1 id="加载文档"><a href="#加载文档" class="headerlink" title="加载文档"></a>加载文档</h1><p><strong>application cache的使用会修改文档的加载过程：</strong></p><ul><li>如果应用缓存存在，浏览器直接从缓存中加载文档与相关资源，不会访问网络。这会提升文档加载速度。</li><li>浏览器检查清单文件列出的资源是否在服务器上被修改。</li><li>如果清单文件被更新了, 浏览器会下载新的清单文件和相关的资源。 这都是在后台执行的，基本不会影响到webapp的性能。</li></ul><p><strong>加载文档与更新应用缓存的流程：</strong></p><ul><li>当浏览器访问一个包含 manifest 特性的文档时，如果应用缓存不存在，浏览器会加载文档，然后获取所有在清单文件中列出的文件，生成应用缓存的第一个版本。<br>对该文档的后续访问会使浏览器直接从应用缓存(而不是服务器)中加载文档与其他在清单文件中列出的资源。此外，浏览器还会向 window.applicationCache 对象发送一个 checking 事件，在遵循合适的 HTTP 缓存规则前提下，获取清单文件。</li><li>如果当前缓存的清单副本是最新的，浏览器将向 applicationCache 对象发送一个 noupdate 事件，到此，更新过程结束。注意，如果你在服务器修改了任何缓存资源，同时也应该修改清单文件，这样浏览器才能知道它需要重新获取资源。</li><li>如果清单文件已经改变，文件中列出的所有文件—也包括通过调用 applicationCache.add() 方法添加到缓存中的那些文件—会被获取并放到一个临时缓存中，遵循适当的 HTTP 缓存规则。对于每个加入到临时缓存中的文件，浏览器会向 applicationCache 对象发送一个 progress 事件。如果出现任何错误，浏览器会发送一个 error 事件，并暂停更新。</li><li>一旦所有文件都获取成功，它们会自动移送到真正的离线缓存中，并向  applicationCache 对象发送一个 cached 事件。鉴于文档早已经被从缓存加载到浏览器中，所以更新后的文档不会重新渲染，直到页面重新加载(可以手动或通过程序)。</li></ul><hr><h1 id="缓存清单（Manifest）文件"><a href="#缓存清单（Manifest）文件" class="headerlink" title="缓存清单（Manifest）文件"></a>缓存清单（Manifest）文件</h1><p><strong>一个缓存清单文件</strong></p><ul><li>web 应用中的 manifest 特性可以指定为缓存清单文件的相对路径或一个绝对 URL(绝对 URL 必须与应用同源)。缓存清单文件可以使用任意扩展名，但传输它的 MIME 类型必须为 <code>text/cache-manifest</code>。</li></ul><p><strong>manifest 文件可分为三个部分：</strong></p><ul><li>CACHE - 缓存文件中记录所属的默认段落。在此标题下列出的文件将在首次下载后进行缓存</li><li>NETWORK - 段落标题下列出的文件是需要与服务器连接的白名单资源。在此标题下列出的文件需要与服务器的连接，且不会被缓存</li><li>FALLBACK - 段指定了一个后备页面，当资源无法访问时，浏览器会使用该页面。在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li></ul><p>CACHE， NETWORK， 和 FALLBACK 段落可以以任意顺序出现在缓存清单文件中，并且每个段落可以在同一清单文件中出现多次。</p><p>🍭<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache" target="_blank" rel="noopener">更详细内容</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是应用程序缓存（Application-Cache）&quot;&gt;&lt;a href=&quot;#什么是应用程序缓存（Application-Cache）&quot; class=&quot;headerlink&quot; title=&quot;什么是应用程序缓存（Application Cache）?&quot;&gt;&lt;/a&gt;什么是应用程序缓存（Application Cache）?&lt;/h1&gt;&lt;p&gt;HTML5 提供一种应用程序缓存机制，使得基于web的应用程序可以离线运行。开发者可以使用 Application Cache (AppCache) 接口设定浏览器应该缓存的资源并使得离线用户可用。 在处于离线状态时，即使用户点击刷新按钮，应用也能正常加载与工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离线浏览: 用户可以在离线状态下浏览网站内容。&lt;/li&gt;
&lt;li&gt;更快的速度: 因为数据被存储在本地，所以速度会更快。&lt;/li&gt;
&lt;li&gt;减轻服务器的负载: 浏览器只会下载在服务器上发生改变的资源。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="缓存" scheme="https://christinamcqueen.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Cache" scheme="https://christinamcqueen.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>ESLint: Parsing Error: &#39;Import&#39; and &#39;Export&#39; May Appear Only With &#39;sourceType: Module&#39;</title>
    <link href="https://christinamcqueen.github.io/2017/08/03/ESLint/Parsing-error-import-and-export-may-appear-only-with-sourceType-module/"/>
    <id>https://christinamcqueen.github.io/2017/08/03/ESLint/Parsing-error-import-and-export-may-appear-only-with-sourceType-module/</id>
    <published>2017-08-03T08:29:19.000Z</published>
    <updated>2018-05-11T02:04:11.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint-Parsing-error-‘import’-and-‘export’-may-appear-only-with-‘sourceType-module’"><a href="#ESLint-Parsing-error-‘import’-and-‘export’-may-appear-only-with-‘sourceType-module’" class="headerlink" title="ESLint: Parsing error: ‘import’ and ‘export’ may appear only with ‘sourceType: module’"></a>ESLint: Parsing error: ‘import’ and ‘export’ may appear only with ‘sourceType: module’</h1><p>1.&nbsp;<code>.eslintrc</code> 中添加:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"parserOptions": &#123;</span><br><span class="line">    "sourceType": "module"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.&nbsp;重启编辑器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ESLint-Parsing-error-‘import’-and-‘export’-may-appear-only-with-‘sourceType-module’&quot;&gt;&lt;a href=&quot;#ESLint-Parsing-error-‘import’-and-‘ex
      
    
    </summary>
    
    
      <category term="ESLint" scheme="https://christinamcqueen.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>ESLint 相关</title>
    <link href="https://christinamcqueen.github.io/2017/08/03/ESLint/%E7%9B%B8%E5%85%B3/"/>
    <id>https://christinamcqueen.github.io/2017/08/03/ESLint/相关/</id>
    <published>2017-08-03T05:46:38.000Z</published>
    <updated>2018-05-11T02:04:11.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">    "indent": [ 'error', 4 ],   // 缩进</span><br><span class="line">    "strict": 0,    // 禁用严格模式</span><br><span class="line">    "comma-dangle": ["error", "never"],</span><br><span class="line">    "curly": ["error", "multi-line"],    // if、else if、else、for、while强制使用大括号，但允许在单行中省略大括号</span><br><span class="line">    "brace-style": [2, "stroustrup"]    // 大括号位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义配置&quot;&gt;&lt;a href=&quot;#自定义配置&quot; class=&quot;headerlink&quot; title=&quot;自定义配置&quot;&gt;&lt;/a&gt;自定义配置&lt;/h1&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="ESLint" scheme="https://christinamcqueen.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>NexT 主题配置</title>
    <link href="https://christinamcqueen.github.io/2017/08/02/Hexo/NexT-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://christinamcqueen.github.io/2017/08/02/Hexo/NexT-主题配置/</id>
    <published>2017-08-02T09:00:00.000Z</published>
    <updated>2018-05-11T02:04:11.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h1><p>将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。安装步骤如下。</p><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下。使用 <code>Git clone</code> 代码：</p><blockquote><p>$ cd your-hexo-site<br>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p></blockquote><hr><h1 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h1><p>打开配置文件 <code>_config.yml</code> ， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p><blockquote><p>theme: next</p></blockquote><a id="more"></a><hr><h1 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h1><h2 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h2><p>目前 NexT 支持三种 Scheme，他们是：</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>修改主题配置文件 <code>\hexo\themes\next\_config.yml</code>，将 <code>Scheme</code> 设置为 <code>Pisces</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>打开配置文件 <code>_config.yml</code> ， 将简体中文，配置如下：</p><blockquote><p>language: zh-Hans</p></blockquote><h2 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h2><p>NexT 使用的是 Font Awesome 提供的图标，Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景。<br>编辑主题配置文件 <code>\hexo\themes\next\_config.yml</code>，修改以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">    home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">    archives:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="comment">#about: /about</span></span><br><span class="line">    <span class="comment">#categories: /categories</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="comment">#commonweal: /404.html</span></span><br></pre></td></tr></table></figure><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>编辑主题配置文件 <code>\hexo\themes\next\_config.yml</code>， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。</p><blockquote><p>avatar: /images/avatar.png</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-NexT&quot;&gt;&lt;a href=&quot;#安装-NexT&quot; class=&quot;headerlink&quot; title=&quot;安装 NexT&quot;&gt;&lt;/a&gt;安装 NexT&lt;/h1&gt;&lt;p&gt;将主题文件拷贝至站点目录的 &lt;code&gt;themes&lt;/code&gt; 目录下， 然后修改下配置文件即可。安装步骤如下。&lt;/p&gt;
&lt;h2 id=&quot;下载主题&quot;&gt;&lt;a href=&quot;#下载主题&quot; class=&quot;headerlink&quot; title=&quot;下载主题&quot;&gt;&lt;/a&gt;下载主题&lt;/h2&gt;&lt;p&gt;在终端窗口下，定位到 &lt;code&gt;Hexo&lt;/code&gt; 站点目录下。使用 &lt;code&gt;Git clone&lt;/code&gt; 代码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd your-hexo-site&lt;br&gt;$ git clone &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt; themes/next&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;启用主题&quot;&gt;&lt;a href=&quot;#启用主题&quot; class=&quot;headerlink&quot; title=&quot;启用主题&quot;&gt;&lt;/a&gt;启用主题&lt;/h1&gt;&lt;p&gt;打开配置文件 &lt;code&gt;_config.yml&lt;/code&gt; ， 找到 &lt;code&gt;theme&lt;/code&gt; 字段，并将其值更改为 &lt;code&gt;next&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;theme: next&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://christinamcqueen.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://christinamcqueen.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 快速建站</title>
    <link href="https://christinamcqueen.github.io/2017/08/02/Hexo/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99/"/>
    <id>https://christinamcqueen.github.io/2017/08/02/Hexo/快速建站/</id>
    <published>2017-08-02T08:59:17.000Z</published>
    <updated>2018-05-11T02:04:12.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-建站"><a href="#Hexo-建站" class="headerlink" title="Hexo 建站"></a>Hexo 建站</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>安装 Hexo 之前，首先要检查电脑中是否已安装下列应用程序：<br>🍭<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>🍭<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="NPM-安装-Hexo"><a href="#NPM-安装-Hexo" class="headerlink" title="NPM 安装 Hexo"></a>NPM 安装 Hexo</h3><blockquote><p>$ npm install -g hexo-cli</p></blockquote><a id="more"></a><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><blockquote><p>$ hexo init [folder]</p></blockquote><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p>$ hexo new [layout] &lt;title&gt;</p></blockquote><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><blockquote><p>$ hexo generate</p></blockquote><p>生成静态文件。</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><blockquote><p>$ hexo server</p></blockquote><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><blockquote><p>$ hexo deploy</p></blockquote><p>部署网站</p><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left">-g, –generate</td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><blockquote><p>$ hexo render &lt;file1&gt;&gt; [file2] …</p></blockquote><p>渲染文件。</p><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>-o, --output</code></td><td style="text-align:left">设置输出路径</td></tr></tbody></table><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><blockquote><p>$ hexo clean</p></blockquote><p>清除缓存文件 ( <code>db.json</code> ) 和已生成的静态文件 ( <code>public</code> )。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><hr><h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><p>🍭<a href="https://hexo.io/themes/" target="_blank" rel="noopener">下载主题</a></p><p>修改配置文件</p><blockquote><p>theme: next</p></blockquote><p>以 <code>next</code> 主题为例，将主题下载到 <code>themes</code> 文件夹下，将 <code>_config.yml</code> 配置文件中的theme改为下载的主题即可。</p><hr><h1 id="Git部署"><a href="#Git部署" class="headerlink" title="Git部署"></a>Git部署</h1><h2 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h2><blockquote><p>$ npm install hexo-deployer-git –save</p></blockquote><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">[branch]</span></span><br><span class="line"><span class="attr">    message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left">repo</td><td style="text-align:left">库（Repository）地址</td></tr><tr><td style="text-align:left">branch</td><td style="text-align:left">分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td></tr><tr><td style="text-align:left">message</td><td style="text-align:left"><pre><code>自定义提交信息 (默认为 Site updated：{{ now('YYYY-MM-DD HH:mm:ss') }})</code></pre></td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote><p>$ hexo deploy</p></blockquote><style type="text/css">table th:first-of-type {    width: 100px;}pre {    margin: 0;}</style>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-建站&quot;&gt;&lt;a href=&quot;#Hexo-建站&quot; class=&quot;headerlink&quot; title=&quot;Hexo 建站&quot;&gt;&lt;/a&gt;Hexo 建站&lt;/h1&gt;&lt;h2 id=&quot;安装前准备&quot;&gt;&lt;a href=&quot;#安装前准备&quot; class=&quot;headerlink&quot; title=&quot;安装前准备&quot;&gt;&lt;/a&gt;安装前准备&lt;/h2&gt;&lt;p&gt;安装 Hexo 之前，首先要检查电脑中是否已安装下列应用程序：&lt;br&gt;🍭&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;&lt;br&gt;🍭&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-Hexo&quot;&gt;&lt;a href=&quot;#安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo&quot;&gt;&lt;/a&gt;安装 Hexo&lt;/h2&gt;&lt;h3 id=&quot;NPM-安装-Hexo&quot;&gt;&lt;a href=&quot;#NPM-安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;NPM 安装 Hexo&quot;&gt;&lt;/a&gt;NPM 安装 Hexo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;$ npm install -g hexo-cli&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://christinamcqueen.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
